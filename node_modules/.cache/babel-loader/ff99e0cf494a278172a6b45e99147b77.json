{"ast":null,"code":"import _slicedToArray from \"/home/kirill/WorkFolder/GameTS/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kirill/WorkFolder/GameTS/my-app/src/App.tsx\";\nimport React from \"react\";\nimport \"./App.css\"; // import { CenterPart } from \"./page/CenterPart\";\n\nimport { RightPart } from \"./page/RightPart\";\nimport { UnitsArray } from \"./Logic/GenerateUnits\";\nimport { useState, useEffect } from \"react\";\nimport { QueueUI } from \"../src/page/QueueUI\";\nimport { UnitUI } from \"../src/page/UnitUI\";\nimport { generateQueue } from \"../src/Logic/Generatequeue\";\n\nconst App = () => {\n  const unitsHP = UnitsArray.map(unit => {\n    return unit._HP;\n  });\n  const falseArray = Array(12).fill(false);\n\n  const _useState = useState(falseArray),\n        _useState2 = _slicedToArray(_useState, 2),\n        isHexed = _useState2[0],\n        setHexed = _useState2[1];\n\n  const getQueue = generateQueue(UnitsArray);\n\n  const _useState3 = useState(getQueue),\n        _useState4 = _slicedToArray(_useState3, 2),\n        queue = _useState4[0],\n        setQueue = _useState4[1];\n\n  useEffect(() => {\n    console.log(\"очередь\", queue);\n    console.log(\"unit id\", queue[0]._id);\n    console.log(\" array of hexed\", isHexed);\n    console.log(\" array of hexed\", isHexed[queue[0]._id]); // if (queue.length <= 6) {\n    //   const copyQueue: Array<Unit> = [...UnitsArray];\n    //   const arrayofAliveUnit: Array<Unit> = copyQueue.filter(\n    //     unit => unit._HP > 0\n    //   );\n    //   console.log(\"alive Unit\");\n    //   const copyArrayOfAliveUnit: Array<Unit> = [...arrayofAliveUnit];\n    //   const sortTeamA: Array<Unit> = copyArrayOfAliveUnit.filter(\n    //     unit => unit._id >= 6\n    //   );\n    //   const sortTeamB: Array<Unit> = copyArrayOfAliveUnit.filter(\n    //     unit => unit._id < 6\n    //   );\n    //   console.log(\"команда A\", sortTeamA);\n    //   console.log(\"команда b\", sortTeamB);\n    //   if (sortTeamB.length === 0 || sortTeamA.length === 0) {\n    //     let winTeam: string = \"\";\n    //     if (sortTeamA.length > sortTeamB.length) winTeam = \"Team Dire\";\n    //     else winTeam = \"Team Radiant\";\n    //     alert(`Game over. ${winTeam} win.Start new game`);\n    //     window.location.reload();\n    //   }\n    // }\n\n    if (queue.length === 0 || isHexed[queue[0]._id]) {\n      console.log(\"i tipa tut\");\n      setPtotect(falseArray);\n      setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n      setHexed(falseArray);\n    }\n\n    const unit = queue[0];\n\n    if (queue.length === 1 && queue[0]._HP === 0) {\n      console.log(\"i kak bi tut\");\n      setPtotect(falseArray); /////сбросить хексы\n\n      setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n      setHexed(falseArray);\n    } else if (isHexed[queue[0]._id]) {\n      console.log(\"vot ono\");\n      const hexedUnits = [...isHexed];\n      hexedUnits[unit._id] = true;\n      setHexed(hexedUnits);\n      setPtotect(falseArray);\n      setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n      setHexed(falseArray);\n    } else if (isHexed[unit._id]) {\n      console.log(\"esli v hekse\");\n      const hexedUnits = [...isHexed];\n      hexedUnits[unit._id] = true;\n      setHexed(hexedUnits);\n      const nextQueue = [...queue];\n      nextQueue.shift();\n      setQueue(nextQueue);\n    } else {\n      if (unit._HP <= 0) {\n        skipTurn();\n      } else {\n        const targetsForAction = unit.doSelect(UnitsArray);\n        const a = [];\n        const idTargets = targetsForAction.map(unit => {\n          a.push(unit._id);\n          return unit._id;\n        });\n        setTarget(idTargets);\n      }\n    }\n  }, [queue]);\n\n  const _useState5 = useState(falseArray),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isProtected = _useState6[0],\n        setPtotect = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        target = _useState8[0],\n        setTarget = _useState8[1];\n\n  const _useState9 = useState(unitsHP),\n        _useState10 = _slicedToArray(_useState9, 2),\n        HP = _useState10[0],\n        setHP = _useState10[1];\n\n  const handleDefenseClick = index => {\n    const protectedState = [...isProtected];\n    protectedState[index] = true;\n    setPtotect(protectedState);\n    skipTurn(); // const nextQueue = [...queue];\n    // nextQueue.shift();\n    // setQueue(nextQueue);\n    // if (nextQueue.length === 0 || queue.length === 0 || isHexed[queue[0]._id]) {\n    //   console.log(\"i tipa tut\");\n    //   setPtotect(falseArray);\n    //   /////сбросить хексы\n    //   setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    //   setHexed(falseArray);\n    // }\n\n    return 1;\n  };\n\n  const handleClick = index => {\n    // (index===0) ? console.log(index) : console.log(index);\n    const selectedUnit = queue[0];\n    const newHP = selectedUnit.doAction(selectedUnit._id, index, target, UnitsArray, HP, isProtected);\n    console.log(\"выбранный юнит\", selectedUnit._id);\n    console.log(\"выбранная цель\", index);\n\n    if (selectedUnit._unitType === \"paralyazer\") {\n      console.log(\"its naga\");\n      const copyIsHexed = [...isHexed];\n      console.log(\"до действия\", copyIsHexed);\n      copyIsHexed[index] = true;\n      console.log(\"after действия\", copyIsHexed);\n\n      (async () => {\n        await setHexed(copyIsHexed);\n      })();\n    }\n\n    console.log(isHexed);\n    console.log(newHP);\n    setHP(newHP);\n    skipTurn(); // const nextQueue = [...queue];\n    // nextQueue.shift();\n    // setQueue(nextQueue);\n    // if (queue.length === 0) {\n    //   console.log(\"new queue\");\n    //   setPtotect(falseArray);\n    //   ///сбросить хексы\n    //   setQueue(generateQueue(UnitsArray, \"new turn\"));\n    //   setHexed(falseArray);\n    // }\n    // ниже рабочий\n    // if (nextQueue.length === 0 || queue.length === 0 || isHexed[queue[0]._id]) {\n    //   console.log(\"i kak bi tut\");\n    //   setPtotect(falseArray);\n    //   /////сбросить хексы\n    //   console.log(isHexed);\n    //   setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    //   setHexed(falseArray);\n    // }\n\n    return 1;\n  };\n\n  const renderLeftPart = () => {\n    const unitsArrayUI = queue.map((unit, index) => {\n      return React.createElement(QueueUI, {\n        HP: HP[unit._id],\n        key: index,\n        currentUnit: unit,\n        currentIndex: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      });\n    });\n    return unitsArrayUI;\n  };\n\n  const isAtcaked = (index, unit) => {\n    // if (target.indexof(index)) return true;\n    // else return false;\n    if (target === undefined) {} else {\n      if (target.indexOf(index) === -1 || HP[index] <= 0) {\n        return false;\n      } else return true;\n    }\n  };\n\n  const renderCenterPart = () => {\n    const unitsArrayUI = UnitsArray.map((unit, index) => {\n      if (index === 5) {\n        return React.createElement(React.Fragment, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, React.createElement(UnitUI, {\n          HP: HP[index],\n          currentUnit: unit,\n          currentIndex: index,\n          underAtack: isAtcaked(index, unit),\n          isActive: queue[0]._id === index ? true : false,\n          hexed: isHexed[index],\n          onClick: () => {\n            handleClick(index);\n          },\n          onDefenseClick: () => {\n            handleDefenseClick(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"border\",\n          key: 100,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(UnitUI, {\n        HP: HP[index],\n        key: index,\n        currentUnit: unit,\n        currentIndex: index,\n        isActive: queue[0]._id === index ? true : false,\n        hexed: isHexed[index],\n        underAtack: isAtcaked(index, unit),\n        onClick: () => {\n          handleClick(index);\n        },\n        onDefenseClick: () => {\n          handleDefenseClick(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"battleField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, unitsArrayUI);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"left-part\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, renderLeftPart()), React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, renderCenterPart()), React.createElement(RightPart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/App.tsx"],"names":["React","RightPart","UnitsArray","useState","useEffect","QueueUI","UnitUI","generateQueue","App","unitsHP","map","unit","_HP","falseArray","Array","fill","isHexed","setHexed","getQueue","queue","setQueue","console","log","_id","length","setPtotect","hexedUnits","nextQueue","shift","skipTurn","targetsForAction","doSelect","a","idTargets","push","setTarget","isProtected","target","HP","setHP","handleDefenseClick","index","protectedState","handleClick","selectedUnit","newHP","doAction","_unitType","copyIsHexed","renderLeftPart","unitsArrayUI","isAtcaked","undefined","indexOf","renderCenterPart"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n// import { CenterPart } from \"./page/CenterPart\";\nimport { RightPart } from \"./page/RightPart\";\nimport { LeftPart } from \"./page/LeftPart\";\nimport { CenterPartV2 } from \"./page/CenterPartV2\";\nimport { UnitsArray } from \"./Logic/GenerateUnits\";\nimport Unit from \"../src/strategy/classes/unit/Unit\";\nimport { useState, useEffect } from \"react\";\nimport { QueueUI } from \"../src/page/QueueUI\";\nimport { UnitUI } from \"../src/page/UnitUI\";\nimport { generateQueue } from \"../src/Logic/Generatequeue\";\nimport { array } from \"prop-types\";\n\nconst App: React.FC = () => {\n  const unitsHP: number[] = UnitsArray.map(unit => {\n    return unit._HP;\n  });\n  const falseArray: boolean[] = Array(12).fill(false);\n  const [isHexed, setHexed] = useState(falseArray);\n  const getQueue: Array<Unit> = generateQueue(UnitsArray);\n  const [queue, setQueue] = useState(getQueue);\n\n  useEffect(() => {\n    console.log(\"очередь\", queue);\n    console.log(\"unit id\", queue[0]._id);\n    console.log(\" array of hexed\", isHexed);\n    console.log(\" array of hexed\", isHexed[queue[0]._id]);\n    // if (queue.length <= 6) {\n    //   const copyQueue: Array<Unit> = [...UnitsArray];\n\n    //   const arrayofAliveUnit: Array<Unit> = copyQueue.filter(\n    //     unit => unit._HP > 0\n    //   );\n    //   console.log(\"alive Unit\");\n    //   const copyArrayOfAliveUnit: Array<Unit> = [...arrayofAliveUnit];\n    //   const sortTeamA: Array<Unit> = copyArrayOfAliveUnit.filter(\n    //     unit => unit._id >= 6\n    //   );\n    //   const sortTeamB: Array<Unit> = copyArrayOfAliveUnit.filter(\n    //     unit => unit._id < 6\n    //   );\n    //   console.log(\"команда A\", sortTeamA);\n    //   console.log(\"команда b\", sortTeamB);\n    //   if (sortTeamB.length === 0 || sortTeamA.length === 0) {\n    //     let winTeam: string = \"\";\n    //     if (sortTeamA.length > sortTeamB.length) winTeam = \"Team Dire\";\n    //     else winTeam = \"Team Radiant\";\n    //     alert(`Game over. ${winTeam} win.Start new game`);\n    //     window.location.reload();\n    //   }\n    // }\n    if (queue.length === 0 || isHexed[queue[0]._id]) {\n      console.log(\"i tipa tut\");\n      setPtotect(falseArray);\n\n      setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n      setHexed(falseArray);\n    }\n\n    const unit = queue[0];\n    if (queue.length === 1 && queue[0]._HP === 0) {\n      console.log(\"i kak bi tut\");\n      setPtotect(falseArray);\n      /////сбросить хексы\n      setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n      setHexed(falseArray);\n    } else if (isHexed[queue[0]._id]) {\n      console.log(\"vot ono\");\n      const hexedUnits = [...isHexed];\n      hexedUnits[unit._id] = true;\n      setHexed(hexedUnits);\n      setPtotect(falseArray);\n      setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n      setHexed(falseArray);\n    } else if (isHexed[unit._id]) {\n      console.log(\"esli v hekse\");\n      const hexedUnits = [...isHexed];\n      hexedUnits[unit._id] = true;\n      setHexed(hexedUnits);\n      const nextQueue = [...queue];\n      nextQueue.shift();\n      setQueue(nextQueue);\n    } else {\n      if (unit._HP <= 0) {\n        skipTurn()\n      } else {\n        const targetsForAction: Array<Unit> = unit.doSelect(UnitsArray);\n\n        const a: number[] = [];\n        const idTargets: number[] = targetsForAction.map(unit => {\n          a.push(unit._id);\n          return unit._id;\n        });\n        setTarget(idTargets);\n      }\n    }\n  }, [queue]);\n  const [isProtected, setPtotect] = useState(falseArray);\n  const [target, setTarget] = useState();\n  const [HP, setHP] = useState(unitsHP);\n\n  const handleDefenseClick = (index: number): number => {\n    const protectedState: Array<boolean> = [...isProtected];\n    protectedState[index] = true;\n    setPtotect(protectedState);\n    skipTurn();\n    // const nextQueue = [...queue];\n    // nextQueue.shift();\n    // setQueue(nextQueue);\n    // if (nextQueue.length === 0 || queue.length === 0 || isHexed[queue[0]._id]) {\n    //   console.log(\"i tipa tut\");\n    //   setPtotect(falseArray);\n    //   /////сбросить хексы\n    //   setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    //   setHexed(falseArray);\n    // }\n\n    return 1;\n  };\n  const handleClick = (index: number): number => {\n    // (index===0) ? console.log(index) : console.log(index);\n    const selectedUnit: Unit = queue[0];\n    const newHP: number[] = selectedUnit.doAction(\n      selectedUnit._id,\n      index,\n      target,\n      UnitsArray,\n      HP,\n      isProtected\n    );\n    console.log(\"выбранный юнит\", selectedUnit._id);\n    console.log(\"выбранная цель\", index);\n    if (selectedUnit._unitType === \"paralyazer\") {\n      console.log(\"its naga\");\n      const copyIsHexed = [...isHexed];\n      console.log(\"до действия\", copyIsHexed);\n      copyIsHexed[index] = true;\n      console.log(\"after действия\", copyIsHexed);\n      (async () => {\n        await setHexed(copyIsHexed);\n      })();\n    }\n    console.log(isHexed);\n    console.log(newHP);\n    setHP(newHP);\n    skipTurn();\n    // const nextQueue = [...queue];\n    // nextQueue.shift();\n    // setQueue(nextQueue);\n    // if (queue.length === 0) {\n    //   console.log(\"new queue\");\n    //   setPtotect(falseArray);\n    //   ///сбросить хексы\n    //   setQueue(generateQueue(UnitsArray, \"new turn\"));\n    //   setHexed(falseArray);\n    // }\n    // ниже рабочий\n    // if (nextQueue.length === 0 || queue.length === 0 || isHexed[queue[0]._id]) {\n    //   console.log(\"i kak bi tut\");\n    //   setPtotect(falseArray);\n    //   /////сбросить хексы\n    //   console.log(isHexed);\n    //   setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    //   setHexed(falseArray);\n    // }\n\n    return 1;\n  };\n\n  type props = {\n    index: number;\n  };\n\n  const renderLeftPart = () => {\n    const unitsArrayUI: any = queue.map((unit, index) => {\n      return (\n        <QueueUI\n          HP={HP[unit._id]}\n          key={index}\n          currentUnit={unit}\n          currentIndex={index}\n        />\n      );\n    });\n\n    return unitsArrayUI;\n  };\n  const isAtcaked: any = (index: number, unit: Unit) => {\n    // if (target.indexof(index)) return true;\n    // else return false;\n    if (target === undefined) {\n    } else {\n      if (target.indexOf(index) === -1 || HP[index] <= 0) {\n        return false;\n      } else return true;\n    }\n  };\n\n  const renderCenterPart = () => {\n    const unitsArrayUI: any = UnitsArray.map((unit, index) => {\n      if (index === 5) {\n        return (\n          <React.Fragment key={index}>\n            <UnitUI\n              HP={HP[index]}\n              currentUnit={unit}\n              currentIndex={index}\n              underAtack={isAtcaked(index, unit)}\n              isActive={queue[0]._id === index ? true : false}\n              hexed={isHexed[index]}\n              onClick={() => {\n                handleClick(index);\n              }}\n              onDefenseClick={() => {\n                handleDefenseClick(index);\n              }}\n            />\n            <div className=\"border\" key={100}></div>\n          </React.Fragment>\n        );\n      }\n      return (\n        <UnitUI\n          HP={HP[index]}\n          key={index}\n          currentUnit={unit}\n          currentIndex={index}\n          isActive={queue[0]._id === index ? true : false}\n          hexed={isHexed[index]}\n          underAtack={isAtcaked(index, unit)}\n          onClick={() => {\n            handleClick(index);\n          }}\n          onDefenseClick={() => {\n            handleDefenseClick(index);\n          }}\n        />\n      );\n    });\n\n    return <div className=\"battleField\">{unitsArrayUI}</div>;\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"left-part\">{renderLeftPart()}</div>\n\n      <React.Fragment>{renderCenterPart()}</React.Fragment>\n      <RightPart />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"/home/kirill/WorkFolder/GameTS/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const generateQueue = units => {\n  const sortedUnits = _objectSpread({}, units);\n\n  console.log(\"received\", units);\n  sortedUnits.sort((a, b) => {\n    if (a._initiative < b._initiative) {\n      return 1;\n    }\n\n    if (a._initiative > b._initiative) {\n      return -1;\n    }\n\n    return 0;\n  });\n};","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/Logic/queue.ts"],"names":["generateQueue","units","sortedUnits","console","log","sort","a","b","_initiative"],"mappings":";;;;;;AACA,OAAO,MAAMA,aAAkB,GAAIC,KAAD,IAAwB;AACxD,QAAMC,WAAuB,qBAAQD,KAAR,CAA7B;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,KAAxB;AACAC,EAAAA,WAAW,CAACG,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzB,QAAID,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,aAAO,CAAP;AACD;;AACD,QAAIF,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,aAAO,CAAC,CAAR;AACD;;AACD,WAAO,CAAP;AACD,GARD;AASD,CAZM","sourcesContent":["import Unit from \"../strategy/classes/unit/Unit\";\nexport const generateQueue: any = (units: Array<Unit>) => {\n  const sortedUnits:Array<Unit> = { ...units };\n  console.log(\"received\", units);\n  sortedUnits.sort((a, b) => {\n    if (a._initiative < b._initiative) {\n      return 1;\n    }\n    if (a._initiative > b._initiative) {\n      return -1;\n    }\n    return 0;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP, isProtected) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage); // if (_damage >= HP[index]) copyHP[index] = 0;\n        // else {\n        //   console.log(\"HP before\", HP[index]);\n        //   copyHP[index] = HP[index] - _damage;\n        //   console.log(\"Hp after\", copyHP[index]);\n        // }\n\n        console.log(\"Before action\", copyHP);\n        unit.doHPUIReduce(copyHP[index], _damage, isProtected[index]);\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    const unitPosition = unit._id;\n\n    const getTargets = (allies, enemies, unitPosition) => {\n      let alliesFirstLane = [];\n      let alliesSecondLane = [];\n      let enemiesSecondLane = [];\n      let enemiesFirstLane = [];\n\n      if (unitPosition <= 5) {\n        alliesFirstLane = allies.slice(3, 6);\n        alliesSecondLane = allies.slice(0, 3);\n        enemiesSecondLane = enemies.slice(3, 6);\n        enemiesFirstLane = enemies.slice(0, 3);\n      } else {\n        alliesFirstLane = allies.slice(0, 3);\n        alliesSecondLane = allies.slice(3, 6);\n        enemiesSecondLane = enemies.slice(0, 3);\n        enemiesFirstLane = enemies.slice(3, 6);\n      }\n\n      console.log(\"2 линия союзников\", alliesSecondLane);\n      console.log(\"1 линя союзников\", alliesFirstLane);\n      console.log(\"2 линия врагов\", enemiesSecondLane);\n      console.log(\"1 линя врагов\", enemiesFirstLane);\n      let isUnitInSecondLine = false;\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unitPosition) {\n          isUnitInSecondLine = true;\n          break;\n        }\n      }\n\n      const getTargetsForUnitFirstLine = (unitPosition, alliesFirstLane, enemiesFirstLane) => {\n        for (let index = 0; index < 3; ++index) {\n          if (alliesFirstLane[index]._id === unitPosition) {\n            if (index === 0) {\n              console.log(\"left\");\n              const copyEnemiesFirstLane = [...enemiesFirstLane];\n              const aliveTarget = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n              if (aliveTarget.length === 1 && aliveTarget[0]._id === enemiesFirstLane[2]._id) return aliveTarget;\n              copyEnemiesFirstLane.pop();\n              console.log(copyEnemiesFirstLane);\n              return copyEnemiesFirstLane;\n            } else if (index === 1) {\n              console.log(\"center\");\n              console.log(enemiesFirstLane);\n              return enemiesFirstLane;\n            } else if (index === 2) {\n              console.log(\"right\");\n              const copyEnemiesFirstLane = [...enemiesFirstLane];\n              const aliveTarget = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n              if (aliveTarget.length === 1 && aliveTarget[0]._id === enemiesFirstLane[0]._id) copyEnemiesFirstLane.shift();\n              console.log(copyEnemiesFirstLane);\n              return copyEnemiesFirstLane;\n            }\n          }\n        }\n\n        return enemies;\n      };\n\n      if (isUnitInSecondLine) {\n        console.log(\"unit in second line\");\n        let alliesDeadFirstLaneUnits = 0;\n        alliesFirstLane.forEach(unit => {\n          if (unit._HP === 0) ++alliesDeadFirstLaneUnits;\n        });\n        let enemiesDeadFirstLaneUnits = 0;\n        enemiesFirstLane.forEach(unit => {\n          if (unit._HP === 0) ++enemiesDeadFirstLaneUnits;\n        });\n        console.log(\"умерло врагов\", enemiesDeadFirstLaneUnits);\n        console.log(\"умерло союзников\", alliesDeadFirstLaneUnits);\n\n        if (alliesDeadFirstLaneUnits === 3 && enemiesDeadFirstLaneUnits === 3) {\n          console.log(\"умерли все союзники на 1 линии и все враги на 1 линии\");\n          return getTargetsForUnitFirstLine(unitPosition, alliesSecondLane, enemiesSecondLane);\n        }\n\n        if (alliesDeadFirstLaneUnits === 3) {\n          console.log(\"умерли все союзники на 1 линии\");\n          return getTargetsForUnitFirstLine(unitPosition, alliesSecondLane, enemiesFirstLane);\n        }\n      } else {\n        console.log(\"unit in first line\");\n        let alliesDeadFirstLaneUnits = 0;\n        enemiesFirstLane.forEach(unit => {\n          if (unit._HP === 0) ++alliesDeadFirstLaneUnits;\n        });\n\n        if (alliesDeadFirstLaneUnits === 3) {\n          console.log(\"умерли все сщюзники на 1 линии\");\n          return getTargetsForUnitFirstLine(unitPosition, alliesSecondLane, enemiesSecondLane);\n        } else {\n          console.log(\"не умерли все сщюзники на 1 линии\");\n          return getTargetsForUnitFirstLine(unitPosition, alliesFirstLane, enemiesFirstLane);\n        }\n      }\n\n      return [];\n    };\n\n    if (unitPosition > 5) {\n      const targets = getTargets(battleField.slice(6, 12), battleField.slice(0, 6), unitPosition);\n      return targets;\n    } else {\n      const targets = getTargets(battleField.slice(0, 6), battleField.slice(6, 12), unitPosition);\n      return targets;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","isProtected","copyHP","_damage","console","log","forEach","unit","index","indexOf","_id","doHPreduce","doHPUIReduce","doTargetSelection","unitPosition","getTargets","allies","enemies","alliesFirstLane","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","slice","isUnitInSecondLine","getTargetsForUnitFirstLine","copyEnemiesFirstLane","aliveTarget","filter","_HP","length","pop","shift","alliesDeadFirstLaneUnits","enemiesDeadFirstLaneUnits"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[],\n    isProtected: boolean[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage);\n\n        // if (_damage >= HP[index]) copyHP[index] = 0;\n        // else {\n        //   console.log(\"HP before\", HP[index]);\n        //   copyHP[index] = HP[index] - _damage;\n        //   console.log(\"Hp after\", copyHP[index]);\n        // }\n        console.log(\"Before action\", copyHP);\n        unit.doHPUIReduce(copyHP[index], _damage, isProtected[index]);\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    const unitPosition: number = unit._id;\n    const getTargets = (\n      allies: Array<Unit>,\n      enemies: Array<Unit>,\n      unitPosition: number\n    ): Array<Unit> => {\n      let alliesFirstLane: Array<Unit> = [];\n      let alliesSecondLane: Array<Unit> = [];\n      let enemiesSecondLane: Array<Unit> = [];\n      let enemiesFirstLane: Array<Unit> = [];\n      if (unitPosition <= 5) {\n        alliesFirstLane = allies.slice(3, 6);\n        alliesSecondLane = allies.slice(0, 3);\n        enemiesSecondLane = enemies.slice(3, 6);\n        enemiesFirstLane = enemies.slice(0, 3);\n      } else {\n        alliesFirstLane = allies.slice(0, 3);\n        alliesSecondLane = allies.slice(3, 6);\n        enemiesSecondLane = enemies.slice(0, 3);\n        enemiesFirstLane = enemies.slice(3, 6);\n      }\n\n      console.log(\"2 линия союзников\", alliesSecondLane);\n      console.log(\"1 линя союзников\", alliesFirstLane);\n      console.log(\"2 линия врагов\", enemiesSecondLane);\n      console.log(\"1 линя врагов\", enemiesFirstLane);\n\n      let isUnitInSecondLine: boolean = false;\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unitPosition) {\n          isUnitInSecondLine = true;\n          break;\n        }\n      }\n\n      const getTargetsForUnitFirstLine = (\n        unitPosition: number,\n        alliesFirstLane: Array<Unit>,\n        enemiesFirstLane: Array<Unit>\n      ): Array<Unit> => {\n        for (let index = 0; index < 3; ++index) {\n          if (alliesFirstLane[index]._id === unitPosition) {\n            if (index === 0) {\n              console.log(\"left\");\n              const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n              const aliveTarget: Array<Unit> = copyEnemiesFirstLane.filter(\n                unit => unit._HP > 0\n              );\n              if (\n                aliveTarget.length === 1 &&\n                aliveTarget[0]._id === enemiesFirstLane[2]._id\n              )\n                return aliveTarget;\n              copyEnemiesFirstLane.pop();\n              console.log(copyEnemiesFirstLane);\n              return copyEnemiesFirstLane;\n            } else if (index === 1) {\n              console.log(\"center\");\n              console.log(enemiesFirstLane);\n              return enemiesFirstLane;\n            } else if (index === 2) {\n              console.log(\"right\");\n              const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n              const aliveTarget: Array<Unit> = copyEnemiesFirstLane.filter(\n                unit => unit._HP > 0\n              );\n              if (\n                aliveTarget.length === 1 &&\n                aliveTarget[0]._id === enemiesFirstLane[0]._id\n              )\n                copyEnemiesFirstLane.shift();\n              console.log(copyEnemiesFirstLane);\n              return copyEnemiesFirstLane;\n            }\n          }\n        }\n        return enemies;\n      };\n\n      if (isUnitInSecondLine) {\n        console.log(\"unit in second line\");\n        let alliesDeadFirstLaneUnits: number = 0;\n        alliesFirstLane.forEach(unit => {\n          if (unit._HP === 0) ++alliesDeadFirstLaneUnits;\n        });\n        let enemiesDeadFirstLaneUnits: number = 0;\n        enemiesFirstLane.forEach(unit => {\n          if (unit._HP === 0) ++enemiesDeadFirstLaneUnits;\n        });\n        console.log(\"умерло врагов\", enemiesDeadFirstLaneUnits);\n        console.log(\"умерло союзников\", alliesDeadFirstLaneUnits);\n        if (alliesDeadFirstLaneUnits === 3 && enemiesDeadFirstLaneUnits === 3) {\n          console.log(\"умерли все союзники на 1 линии и все враги на 1 линии\");\n          return getTargetsForUnitFirstLine(\n            unitPosition,\n            alliesSecondLane,\n            enemiesSecondLane\n          );\n        }\n        if (alliesDeadFirstLaneUnits === 3) {\n          console.log(\"умерли все союзники на 1 линии\");\n          return getTargetsForUnitFirstLine(\n            unitPosition,\n            alliesSecondLane,\n            enemiesFirstLane\n          );\n        }\n      } else {\n        console.log(\"unit in first line\");\n\n        let alliesDeadFirstLaneUnits: number = 0;\n        enemiesFirstLane.forEach(unit => {\n          if (unit._HP === 0) ++alliesDeadFirstLaneUnits;\n        });\n        if (alliesDeadFirstLaneUnits === 3) {\n          console.log(\"умерли все сщюзники на 1 линии\");\n          return getTargetsForUnitFirstLine(\n            unitPosition,\n            alliesSecondLane,\n            enemiesSecondLane\n          );\n        } else {\n          console.log(\"не умерли все сщюзники на 1 линии\");\n          return getTargetsForUnitFirstLine(\n            unitPosition,\n            alliesFirstLane,\n            enemiesFirstLane\n          );\n        }\n      }\n\n      return [];\n    };\n    if (unitPosition > 5) {\n      const targets: Array<Unit> = getTargets(\n        battleField.slice(6, 12),\n        battleField.slice(0, 6),\n        unitPosition\n      );\n      return targets;\n    } else {\n      const targets: Array<Unit> = getTargets(\n        battleField.slice(0, 6),\n        battleField.slice(6, 12),\n        unitPosition\n      );\n      return targets;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
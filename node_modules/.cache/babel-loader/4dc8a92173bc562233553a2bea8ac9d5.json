{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage);\n        if (_damage >= HP[index]) copyHP[index] = 0;else {\n          console.log(\"HP before\", HP[index]);\n          copyHP[index] = HP[index] - _damage;\n          console.log(\"Hp after\", copyHP[index]);\n        }\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    const unitPosition = unit._id;\n\n    const getTargets = (allies, enemies, unitPosition) => {\n      let alliesFirstLane = allies.slice(0, 3);\n      let alliesSecondLane = allies.slice(3, 6);\n      let enemiesSecondLane = enemies.slice(0, 3);\n      let enemiesFirstLane = enemies.slice(3, 6);\n\n      if (unitPosition < 5) {\n        const copyAlliesFirstLane = [...alliesFirstLane];\n        const copyAlliesSecondLane = [...alliesSecondLane];\n        alliesFirstLane = copyAlliesSecondLane;\n        alliesSecondLane = copyAlliesFirstLane;\n      }\n\n      console.log(\"alliesFirstLane\", alliesFirstLane);\n      console.log(\"alliesSecondLane\", alliesSecondLane);\n      console.log(\"enemiesSecondLane\", enemiesSecondLane);\n      console.log(\"enemiesFirstLane\", enemiesFirstLane);\n      let isUnitInSecondLine = false;\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unitPosition) {\n          isUnitInSecondLine = true;\n          break;\n        }\n      }\n\n      if (isUnitInSecondLine) {\n        console.log(\"unit in second line\");\n      } else {\n        console.log(\"unit in first line\");\n      }\n\n      return enemies;\n    };\n\n    if (unitPosition > 5) {\n      const targets = getTargets(battleField.slice(6, 12), battleField.slice(0, 6), unitPosition);\n      return targets;\n    } else {\n      const targets = getTargets(battleField.slice(0, 6), battleField.slice(6, 12), unitPosition);\n      return targets;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","copyHP","_damage","console","log","forEach","unit","index","indexOf","_id","doHPreduce","doTargetSelection","unitPosition","getTargets","allies","enemies","alliesFirstLane","slice","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","copyAlliesFirstLane","copyAlliesSecondLane","isUnitInSecondLine"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage);\n        if (_damage >= HP[index]) copyHP[index] = 0;\n        else {\n          console.log(\"HP before\", HP[index]);\n          copyHP[index] = HP[index] - _damage;\n          console.log(\"Hp after\", copyHP[index]);\n        }\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    const unitPosition: number = unit._id;\n    const getTargets = (\n      allies: Array<Unit>,\n      enemies: Array<Unit>,\n      unitPosition: number\n    ): Array<Unit> => {\n      let alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      let alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      let enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      let enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      if (unitPosition < 5) {\n        const copyAlliesFirstLane: Array<Unit> = [...alliesFirstLane];\n        const copyAlliesSecondLane: Array<Unit> = [...alliesSecondLane];\n        alliesFirstLane = copyAlliesSecondLane;\n        alliesSecondLane = copyAlliesFirstLane;\n      }\n      console.log(\"alliesFirstLane\", alliesFirstLane);\n      console.log(\"alliesSecondLane\", alliesSecondLane);\n      console.log(\"enemiesSecondLane\", enemiesSecondLane);\n      console.log(\"enemiesFirstLane\", enemiesFirstLane);\n      let isUnitInSecondLine: boolean = false;\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unitPosition) {\n          isUnitInSecondLine = true;\n          break;\n        }\n      }\n      if (isUnitInSecondLine) {\n        console.log(\"unit in second line\");\n      } else {\n        console.log(\"unit in first line\");\n      }\n      return enemies;\n    };\n    if (unitPosition > 5) {\n      const targets: Array<Unit> = getTargets(\n        battleField.slice(6, 12),\n        battleField.slice(0, 6),\n        unitPosition\n      );\n      return targets;\n    } else {\n      const targets: Array<Unit> = getTargets(\n        battleField.slice(0, 6),\n        battleField.slice(6, 12),\n        unitPosition\n      );\n      return targets;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
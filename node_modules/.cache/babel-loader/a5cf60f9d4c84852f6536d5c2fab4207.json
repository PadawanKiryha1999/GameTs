{"ast":null,"code":"export default class HealerStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP, protection, support) {\n    console.log(\"Healer strategy \");\n    console.log(\"atacking unit\", atackingUnit);\n    console.log(\"chosen target\", target);\n    console.log(\"array of targets\", targets);\n    console.log(\"battlefield\", battleField);\n    console.log(\"HPs\", HP);\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    const heal = _damage * -1;\n    const maxHP = battleField[target]._maxHP;\n    let currentHPUI = copyHP[target];\n    console.log(\"Hp before heal\", currentHP);\n\n    if (currentHP - heal > maxHP) {\n      currentHP = maxHP;\n      battleField[target]._HP = maxHP;\n    } else {\n      battleField[target].doHPreduce(heal);\n      copyHP[target] = battleField[target].doHPUIReduce(copyHP[target], heal);\n    }\n\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    console.log(\" Healer target selection\");\n    const copyBattleField = [...battleField];\n    if (unit._id >= 6) return copyBattleField.splice(6, 12);else return copyBattleField.splice(0, 6);\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/HealerStrategy.ts"],"names":["HealerStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","protection","support","console","log","copyHP","_damage","heal","maxHP","_maxHP","currentHPUI","currentHP","_HP","doHPreduce","doHPUIReduce","doTargetSelection","unit","copyBattleField","_id","splice"],"mappings":"AAEA,eAAe,MAAMA,cAAN,CAA0C;AAChDC,EAAAA,WAAP,CACEC,YADF,EAEEC,MAFF,EAGEC,OAHF,EAIEC,WAJF,EAKEC,EALF,EAMEC,UANF,EAOEC,OAPF,EAQY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,YAA7B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,MAA7B;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCN,OAAhC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,WAA3B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,EAAnB;AACA,UAAMK,MAAgB,GAAG,CAAC,GAAGL,EAAJ,CAAzB;AAPU,UAQFM,OARE,GAQUP,WAAW,CAACH,YAAD,CARrB,CAQFU,OARE;AASV,UAAMC,IAAY,GAAGD,OAAO,GAAG,CAAC,CAAhC;AACA,UAAME,KAAK,GAAGT,WAAW,CAACF,MAAD,CAAX,CAAoBY,MAAlC;AACA,QAAIC,WAAW,GAAGL,MAAM,CAACR,MAAD,CAAxB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BO,SAA7B;;AACA,QAAIA,SAAS,GAAGJ,IAAZ,GAAmBC,KAAvB,EAA8B;AAC5BG,MAAAA,SAAS,GAAGH,KAAZ;AACAT,MAAAA,WAAW,CAACF,MAAD,CAAX,CAAoBe,GAApB,GAA0BJ,KAA1B;AACD,KAHD,MAGO;AACLT,MAAAA,WAAW,CAACF,MAAD,CAAX,CAAoBgB,UAApB,CAA+BN,IAA/B;AACAF,MAAAA,MAAM,CAACR,MAAD,CAAN,GAAiBE,WAAW,CAACF,MAAD,CAAX,CAAoBiB,YAApB,CAAiCT,MAAM,CAACR,MAAD,CAAvC,EAAiDU,IAAjD,CAAjB;AACD;;AAED,WAAOF,MAAP;AACD;;AACMU,EAAAA,iBAAP,CAAyBC,IAAzB,EAAqCjB,WAArC,EAA4E;AAC1EI,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAEA,UAAMa,eAAe,GAAG,CAAC,GAAGlB,WAAJ,CAAxB;AACA,QAAIiB,IAAI,CAACE,GAAL,IAAY,CAAhB,EAAmB,OAAOD,eAAe,CAACE,MAAhB,CAAuB,CAAvB,EAA0B,EAA1B,CAAP,CAAnB,KACK,OAAOF,eAAe,CAACE,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAAP;AACN;;AAtCsD","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class HealerStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[],\n    protection: undefined,\n    support: string\n  ): number[] {\n    console.log(\"Healer strategy \");\n    console.log(\"atacking unit\", atackingUnit);\n    console.log(\"chosen target\", target);\n    console.log(\"array of targets\", targets);\n    console.log(\"battlefield\", battleField);\n    console.log(\"HPs\", HP);\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    const heal: number = _damage * -1;\n    const maxHP = battleField[target]._maxHP;\n    let currentHPUI = copyHP[target];\n    console.log(\"Hp before heal\",currentHP)\n    if (currentHP - heal > maxHP) {\n      currentHP = maxHP;\n      battleField[target]._HP = maxHP;\n    } else {\n      battleField[target].doHPreduce(heal);\n      copyHP[target] = battleField[target].doHPUIReduce(copyHP[target], heal);\n    }\n\n    return copyHP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    console.log(\" Healer target selection\");\n\n    const copyBattleField = [...battleField];\n    if (unit._id >= 6) return copyBattleField.splice(6, 12);\n    else return copyBattleField.splice(0, 6);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/home/kirill/WorkFolder/GameTS/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kirill/WorkFolder/GameTS/my-app/src/App.tsx\";\nimport React from \"react\";\nimport \"./App.css\"; // import { CenterPart } from \"./page/CenterPart\";\n\nimport { RightPart } from \"./page/RightPart\";\nimport { UnitsArray } from \"./Logic/GenerateUnits\";\nimport { useState, useEffect } from \"react\";\nimport { QueueUI } from \"../src/page/QueueUI\";\nimport { UnitUI } from \"../src/page/UnitUI\";\nimport { generateQueue } from \"../src/Logic/Generatequeue\";\n\nconst App = () => {\n  const unitsHP = UnitsArray.map(unit => {\n    return unit._HP;\n  });\n  const falseArray = Array(12).fill(false);\n\n  const _useState = useState(falseArray),\n        _useState2 = _slicedToArray(_useState, 2),\n        isHexed = _useState2[0],\n        setHexed = _useState2[1];\n\n  const getQueue = generateQueue(UnitsArray);\n\n  const _useState3 = useState(getQueue),\n        _useState4 = _slicedToArray(_useState3, 2),\n        queue = _useState4[0],\n        setQueue = _useState4[1];\n\n  const filterHP = array => {\n    const a = array.filter(unit => unit._HP > 0);\n    return a;\n  };\n\n  const getAllyAndEnemyTeam = (unitId, battleField) => {\n    console.log(\"Its buttleField must be const\", battleField);\n    const len = battleField.length;\n    const lenDivTwo = len / 2;\n    const lenDivFour = len / 4;\n    const sumOFLenDivTwoLenDivFour = lenDivTwo + lenDivFour;\n    const copyBattleField = [...battleField]; // const teamB0 = battleField.slice(6, 9);\n    // const teamB1 = battleField.slice(9, 12);\n\n    const teamB0 = battleField.slice(lenDivTwo, sumOFLenDivTwoLenDivFour);\n    const teamB1 = battleField.slice(sumOFLenDivTwoLenDivFour, len);\n    const teamB = teamB1.concat(teamB0);\n    const teamA = battleField.slice(0, lenDivTwo);\n    let simpleArray = {\n      ally: teamA,\n      enemy: teamB\n    };\n    console.log(teamB.some(elem => elem._id == unitId));\n\n    if (teamB.some(elem => elem._id == unitId)) {\n      simpleArray = {\n        ally: teamB,\n        enemy: teamA\n      };\n    }\n\n    console.log(simpleArray);\n    return simpleArray;\n  };\n\n  const setHexedFUnction = () => {\n    console.log(\"its naga\");\n    const copyIsHexed = [...isHexed];\n    console.log(\"до действия\", copyIsHexed);\n    copyIsHexed[index] = true;\n    console.log(\"after действия\", copyIsHexed);\n    setHexed(copyIsHexed);\n  };\n\n  const generateNewTurn = () => {\n    setPtotect(falseArray);\n    setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    setHexed(falseArray);\n  };\n\n  const skipTurn = () => {\n    const nextQueue = [...queue];\n    nextQueue.shift();\n    setQueue(nextQueue);\n\n    if (nextQueue.length === 0) {\n      generateNewTurn();\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"очередь\", queue);\n    console.log(\"type of queue\", typeof queue);\n    console.log(\"unit id\", queue[0]._id);\n    console.log(\" array of hexed\", isHexed);\n    console.log(\" array of hexed\", isHexed[queue[0]._id]);\n    const unit = queue[0];\n\n    const _getAllyAndEnemyTeam = getAllyAndEnemyTeam(unit._id, UnitsArray),\n          ally = _getAllyAndEnemyTeam.ally,\n          enemy = _getAllyAndEnemyTeam.enemy;\n\n    const filteredAlly = filterHP(ally);\n    const filteredEnemy = filterHP(enemy);\n\n    if (filteredAlly.length === 0 || filteredEnemy.length === 0) {\n      alert(\"Game over.Attacking team win! Start new Game\");\n      window.location.reload();\n    }\n\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    console.log(filteredAlly, filteredEnemy);\n\n    if (unit._HP == 0 || isHexed[unit._id]) {\n      skipTurn();\n    }\n\n    const targetsForAction = unit.doSelect(UnitsArray);\n    const a = [];\n    const idTargets = targetsForAction.map(unit => {\n      a.push(unit._id);\n      return unit._id;\n    });\n    setTarget(idTargets);\n  }, [queue, isHexed]);\n\n  const _useState5 = useState(falseArray),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isProtected = _useState6[0],\n        setPtotect = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        target = _useState8[0],\n        setTarget = _useState8[1];\n\n  const _useState9 = useState(unitsHP),\n        _useState10 = _slicedToArray(_useState9, 2),\n        HP = _useState10[0],\n        setHP = _useState10[1];\n\n  const handleDefenseClick = index => {\n    const protectedState = [...isProtected];\n    protectedState[index] = true;\n    setPtotect(protectedState);\n    skipTurn();\n    console.log(\"after skip\");\n    return 1;\n  };\n\n  const handleClick = index => {\n    const selectedUnit = queue[0];\n    const newHP = selectedUnit.doAction(selectedUnit._id, index, target, UnitsArray, HP, isProtected);\n    console.log(\"выбранный юнит\", selectedUnit._id);\n    console.log(\"выбранная цель\", index);\n\n    if (selectedUnit._unitType === \"paralyazer\") {\n      console.log(\"its naga\");\n      const copyIsHexed = [...isHexed];\n      console.log(\"до действия\", copyIsHexed);\n      copyIsHexed[index] = true;\n      console.log(\"after действия\", copyIsHexed);\n      setHexed(copyIsHexed);\n    }\n\n    console.log(isHexed);\n    console.log(newHP);\n    setHP(newHP);\n    skipTurn();\n    return 1;\n  };\n\n  const renderLeftPart = () => {\n    const unitsArrayUI = queue.map((unit, index) => {\n      return React.createElement(QueueUI, {\n        HP: HP[unit._id],\n        key: index,\n        currentUnit: unit,\n        currentIndex: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      });\n    });\n    return unitsArrayUI;\n  };\n\n  const isAtcaked = (index, unit) => {\n    if (target === undefined) {} else {\n      if (target.indexOf(index) === -1 || HP[index] <= 0) {\n        return false;\n      } else return true;\n    }\n  };\n\n  const renderCenterPart = () => {\n    const unitsArrayUI = UnitsArray.map((unit, index) => {\n      if (index === 5) {\n        return React.createElement(React.Fragment, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(UnitUI, {\n          HP: HP[index],\n          currentUnit: unit,\n          currentIndex: index,\n          underAtack: isAtcaked(index, unit),\n          isActive: queue[0]._id === index ? true : false,\n          hexed: isHexed[index],\n          protected: isProtected[index],\n          onClick: () => {\n            handleClick(index);\n          },\n          onDefenseClick: () => {\n            handleDefenseClick(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"border\",\n          key: 100,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(UnitUI, {\n        HP: HP[index],\n        key: index,\n        currentUnit: unit,\n        currentIndex: index,\n        isActive: queue[0]._id === index ? true : false,\n        hexed: isHexed[index],\n        protected: isProtected[index],\n        underAtack: isAtcaked(index, unit),\n        onClick: () => {\n          handleClick(index);\n        },\n        onDefenseClick: () => {\n          handleDefenseClick(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"battleField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, unitsArrayUI);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"left-part\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, renderLeftPart()), React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, renderCenterPart()), React.createElement(RightPart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/App.tsx"],"names":["React","RightPart","UnitsArray","useState","useEffect","QueueUI","UnitUI","generateQueue","App","unitsHP","map","unit","_HP","falseArray","Array","fill","isHexed","setHexed","getQueue","queue","setQueue","filterHP","array","a","filter","getAllyAndEnemyTeam","unitId","battleField","console","log","len","length","lenDivTwo","lenDivFour","sumOFLenDivTwoLenDivFour","copyBattleField","teamB0","slice","teamB1","teamB","concat","teamA","simpleArray","ally","enemy","some","elem","_id","setHexedFUnction","copyIsHexed","index","generateNewTurn","setPtotect","skipTurn","nextQueue","shift","filteredAlly","filteredEnemy","alert","window","location","reload","targetsForAction","doSelect","idTargets","push","setTarget","isProtected","target","HP","setHP","handleDefenseClick","protectedState","handleClick","selectedUnit","newHP","doAction","_unitType","renderLeftPart","unitsArrayUI","isAtcaked","undefined","indexOf","renderCenterPart"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CACA;;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAGA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,aAAT,QAA8B,4BAA9B;;AAIA,MAAMC,GAAa,GAAG,MAAM;AAC1B,QAAMC,OAAiB,GAAGP,UAAU,CAACQ,GAAX,CAAeC,IAAI,IAAI;AAC/C,WAAOA,IAAI,CAACC,GAAZ;AACD,GAFyB,CAA1B;AAGA,QAAMC,UAAqB,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,KAAf,CAA9B;;AAJ0B,oBAKEZ,QAAQ,CAACU,UAAD,CALV;AAAA;AAAA,QAKnBG,OALmB;AAAA,QAKVC,QALU;;AAM1B,QAAMC,QAAqB,GAAGX,aAAa,CAACL,UAAD,CAA3C;;AAN0B,qBAOAC,QAAQ,CAACe,QAAD,CAPR;AAAA;AAAA,QAOnBC,KAPmB;AAAA,QAOZC,QAPY;;AAa1B,QAAMC,QAAQ,GAAIC,KAAD,IAAqC;AACpD,UAAMC,CAAc,GAAGD,KAAK,CAACE,MAAN,CAAab,IAAI,IAAIA,IAAI,CAACC,GAAL,GAAW,CAAhC,CAAvB;AACA,WAAOW,CAAP;AACD,GAHD;;AAKA,QAAME,mBAAmB,GAAG,CAC1BC,MAD0B,EAE1BC,WAF0B,KAGV;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,WAA7C;AACA,UAAMG,GAAG,GAAGH,WAAW,CAACI,MAAxB;AACA,UAAMC,SAAS,GAAGF,GAAG,GAAG,CAAxB;AACA,UAAMG,UAAU,GAAGH,GAAG,GAAG,CAAzB;AACA,UAAMI,wBAAwB,GAAGF,SAAS,GAAGC,UAA7C;AACA,UAAME,eAAe,GAAG,CAAC,GAAGR,WAAJ,CAAxB,CANgB,CAOhB;AACA;;AACA,UAAMS,MAAM,GAAGT,WAAW,CAACU,KAAZ,CAAkBL,SAAlB,EAA6BE,wBAA7B,CAAf;AACA,UAAMI,MAAM,GAAGX,WAAW,CAACU,KAAZ,CAAkBH,wBAAlB,EAA4CJ,GAA5C,CAAf;AACA,UAAMS,KAAK,GAAGD,MAAM,CAACE,MAAP,CAAcJ,MAAd,CAAd;AACA,UAAMK,KAAK,GAAGd,WAAW,CAACU,KAAZ,CAAkB,CAAlB,EAAqBL,SAArB,CAAd;AACA,QAAIU,WAAW,GAAG;AAChBC,MAAAA,IAAI,EAAEF,KADU;AAEhBG,MAAAA,KAAK,EAAEL;AAFS,KAAlB;AAIAX,IAAAA,OAAO,CAACC,GAAR,CAAYU,KAAK,CAACM,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,GAAL,IAAYrB,MAA/B,CAAZ;;AACA,QAAIa,KAAK,CAACM,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,GAAL,IAAYrB,MAA/B,CAAJ,EAA4C;AAC1CgB,MAAAA,WAAW,GAAG;AACZC,QAAAA,IAAI,EAAEJ,KADM;AAEZK,QAAAA,KAAK,EAAEH;AAFK,OAAd;AAID;;AACDb,IAAAA,OAAO,CAACC,GAAR,CAAYa,WAAZ;AACA,WAAOA,WAAP;AACD,GA7BD;;AA+BA,QAAMM,gBAAgB,GAAE,MAAI;AAC1BpB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMoB,WAAW,GAAG,CAAC,GAAGjC,OAAJ,CAApB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BoB,WAA3B;AACAA,IAAAA,WAAW,CAACC,KAAD,CAAX,GAAqB,IAArB;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BoB,WAA9B;AACAhC,IAAAA,QAAQ,CAACgC,WAAD,CAAR;AACD,GAPD;;AAQA,QAAME,eAAe,GAAG,MAAM;AAC5BC,IAAAA,UAAU,CAACvC,UAAD,CAAV;AACAO,IAAAA,QAAQ,CAACb,aAAa,CAACL,UAAD,EAAa,UAAb,EAAyBc,OAAzB,CAAd,CAAR;AACAC,IAAAA,QAAQ,CAACJ,UAAD,CAAR;AACD,GAJD;;AAMA,QAAMwC,QAAQ,GAAG,MAAM;AACrB,UAAMC,SAAS,GAAG,CAAC,GAAGnC,KAAJ,CAAlB;AACAmC,IAAAA,SAAS,CAACC,KAAV;AACAnC,IAAAA,QAAQ,CAACkC,SAAD,CAAR;;AAEA,QAAIA,SAAS,CAACvB,MAAV,KAAqB,CAAzB,EAA4B;AAC1BoB,MAAAA,eAAe;AAChB;AACF,GARD;;AAUA/C,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBV,KAAvB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,OAAOV,KAApC;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBV,KAAK,CAAC,CAAD,CAAL,CAAS4B,GAAhC;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bb,OAA/B;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bb,OAAO,CAACG,KAAK,CAAC,CAAD,CAAL,CAAS4B,GAAV,CAAtC;AACA,UAAMpC,IAAI,GAAGQ,KAAK,CAAC,CAAD,CAAlB;;AANc,iCAOUM,mBAAmB,CAACd,IAAI,CAACoC,GAAN,EAAW7C,UAAX,CAP7B;AAAA,UAONyC,IAPM,wBAONA,IAPM;AAAA,UAOAC,KAPA,wBAOAA,KAPA;;AAQd,UAAMY,YAAY,GAAGnC,QAAQ,CAACsB,IAAD,CAA7B;AACA,UAAMc,aAAa,GAAGpC,QAAQ,CAACuB,KAAD,CAA9B;;AACA,QAAIY,YAAY,CAACzB,MAAb,KAAwB,CAAxB,IAA6B0B,aAAa,CAAC1B,MAAd,KAAyB,CAA1D,EAA6D;AAC3D2B,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AACDjC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBc,IAApB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBe,KAArB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY2B,YAAZ,EAA0BC,aAA1B;;AACA,QAAI9C,IAAI,CAACC,GAAL,IAAY,CAAZ,IAAiBI,OAAO,CAACL,IAAI,CAACoC,GAAN,CAA5B,EAAwC;AACtCM,MAAAA,QAAQ;AACT;;AACD,UAAMS,gBAA6B,GAAGnD,IAAI,CAACoD,QAAL,CAAc7D,UAAd,CAAtC;AACA,UAAMqB,CAAW,GAAG,EAApB;AACA,UAAMyC,SAAmB,GAAGF,gBAAgB,CAACpD,GAAjB,CAAqBC,IAAI,IAAI;AACvDY,MAAAA,CAAC,CAAC0C,IAAF,CAAOtD,IAAI,CAACoC,GAAZ;AACA,aAAOpC,IAAI,CAACoC,GAAZ;AACD,KAH2B,CAA5B;AAIAmB,IAAAA,SAAS,CAACF,SAAD,CAAT;AACD,GA3BQ,EA2BN,CAAC7C,KAAD,EAAQH,OAAR,CA3BM,CAAT;;AAzE0B,qBAqGQb,QAAQ,CAACU,UAAD,CArGhB;AAAA;AAAA,QAqGnBsD,WArGmB;AAAA,QAqGNf,UArGM;;AAAA,qBAsGEjD,QAAQ,EAtGV;AAAA;AAAA,QAsGnBiE,MAtGmB;AAAA,QAsGXF,SAtGW;;AAAA,qBAuGN/D,QAAQ,CAACM,OAAD,CAvGF;AAAA;AAAA,QAuGnB4D,EAvGmB;AAAA,QAuGfC,KAvGe;;AAyG1B,QAAMC,kBAAkB,GAAIrB,KAAD,IAA2B;AACpD,UAAMsB,cAA8B,GAAG,CAAC,GAAGL,WAAJ,CAAvC;AACAK,IAAAA,cAAc,CAACtB,KAAD,CAAd,GAAwB,IAAxB;AACAE,IAAAA,UAAU,CAACoB,cAAD,CAAV;AACAnB,IAAAA,QAAQ;AACRzB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,WAAO,CAAP;AACD,GARD;;AASA,QAAM4C,WAAW,GAAIvB,KAAD,IAA2B;AAC7C,UAAMwB,YAAkB,GAAGvD,KAAK,CAAC,CAAD,CAAhC;AACA,UAAMwD,KAAe,GAAGD,YAAY,CAACE,QAAb,CACtBF,YAAY,CAAC3B,GADS,EAEtBG,KAFsB,EAGtBkB,MAHsB,EAItBlE,UAJsB,EAKtBmE,EALsB,EAMtBF,WANsB,CAAxB;AAQAvC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B6C,YAAY,CAAC3B,GAA3C;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BqB,KAA9B;;AACA,QAAIwB,YAAY,CAACG,SAAb,KAA2B,YAA/B,EAA6C;AAC3CjD,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,YAAMoB,WAAW,GAAG,CAAC,GAAGjC,OAAJ,CAApB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BoB,WAA3B;AACAA,MAAAA,WAAW,CAACC,KAAD,CAAX,GAAqB,IAArB;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BoB,WAA9B;AACAhC,MAAAA,QAAQ,CAACgC,WAAD,CAAR;AACD;;AACDrB,IAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY8C,KAAZ;AACAL,IAAAA,KAAK,CAACK,KAAD,CAAL;AACAtB,IAAAA,QAAQ;AACR,WAAO,CAAP;AACD,GAzBD;;AA+BA,QAAMyB,cAAc,GAAG,MAAM;AAC3B,UAAMC,YAAiB,GAAG5D,KAAK,CAACT,GAAN,CAAU,CAACC,IAAD,EAAOuC,KAAP,KAAiB;AACnD,aACE,oBAAC,OAAD;AACE,QAAA,EAAE,EAAEmB,EAAE,CAAC1D,IAAI,CAACoC,GAAN,CADR;AAEE,QAAA,GAAG,EAAEG,KAFP;AAGE,QAAA,WAAW,EAAEvC,IAHf;AAIE,QAAA,YAAY,EAAEuC,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KATyB,CAA1B;AAWA,WAAO6B,YAAP;AACD,GAbD;;AAcA,QAAMC,SAAc,GAAG,CAAC9B,KAAD,EAAgBvC,IAAhB,KAA+B;AACpD,QAAIyD,MAAM,KAAKa,SAAf,EAA0B,CACzB,CADD,MACO;AACL,UAAIb,MAAM,CAACc,OAAP,CAAehC,KAAf,MAA0B,CAAC,CAA3B,IAAgCmB,EAAE,CAACnB,KAAD,CAAF,IAAa,CAAjD,EAAoD;AAClD,eAAO,KAAP;AACD,OAFD,MAEO,OAAO,IAAP;AACR;AACF,GAPD;;AASA,QAAMiC,gBAAgB,GAAG,MAAM;AAC7B,UAAMJ,YAAiB,GAAG7E,UAAU,CAACQ,GAAX,CAAe,CAACC,IAAD,EAAOuC,KAAP,KAAiB;AACxD,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,eACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,UAAA,GAAG,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,MAAD;AACE,UAAA,EAAE,EAAEmB,EAAE,CAACnB,KAAD,CADR;AAEE,UAAA,WAAW,EAAEvC,IAFf;AAGE,UAAA,YAAY,EAAEuC,KAHhB;AAIE,UAAA,UAAU,EAAE8B,SAAS,CAAC9B,KAAD,EAAQvC,IAAR,CAJvB;AAKE,UAAA,QAAQ,EAAEQ,KAAK,CAAC,CAAD,CAAL,CAAS4B,GAAT,KAAiBG,KAAjB,GAAyB,IAAzB,GAAgC,KAL5C;AAME,UAAA,KAAK,EAAElC,OAAO,CAACkC,KAAD,CANhB;AAOE,UAAA,SAAS,EAAEiB,WAAW,CAACjB,KAAD,CAPxB;AAQE,UAAA,OAAO,EAAE,MAAM;AACbuB,YAAAA,WAAW,CAACvB,KAAD,CAAX;AACD,WAVH;AAWE,UAAA,cAAc,EAAE,MAAM;AACpBqB,YAAAA,kBAAkB,CAACrB,KAAD,CAAlB;AACD,WAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAgBE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAwB,UAAA,GAAG,EAAE,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAhBF,CADF;AAoBD;;AACD,aACE,oBAAC,MAAD;AACE,QAAA,EAAE,EAAEmB,EAAE,CAACnB,KAAD,CADR;AAEE,QAAA,GAAG,EAAEA,KAFP;AAGE,QAAA,WAAW,EAAEvC,IAHf;AAIE,QAAA,YAAY,EAAEuC,KAJhB;AAKE,QAAA,QAAQ,EAAE/B,KAAK,CAAC,CAAD,CAAL,CAAS4B,GAAT,KAAiBG,KAAjB,GAAyB,IAAzB,GAAgC,KAL5C;AAME,QAAA,KAAK,EAAElC,OAAO,CAACkC,KAAD,CANhB;AAOE,QAAA,SAAS,EAAEiB,WAAW,CAACjB,KAAD,CAPxB;AAQE,QAAA,UAAU,EAAE8B,SAAS,CAAC9B,KAAD,EAAQvC,IAAR,CARvB;AASE,QAAA,OAAO,EAAE,MAAM;AACb8D,UAAAA,WAAW,CAACvB,KAAD,CAAX;AACD,SAXH;AAYE,QAAA,cAAc,EAAE,MAAM;AACpBqB,UAAAA,kBAAkB,CAACrB,KAAD,CAAlB;AACD,SAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAkBD,KAzCyB,CAA1B;AA2CA,WAAO;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B6B,YAA9B,CAAP;AACD,GA7CD;;AA+CA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BD,cAAc,EAA1C,CADF,EAGE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBK,gBAAgB,EAAjC,CAHF,EAIE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD,CA/ND;;AAiOA,eAAe3E,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n// import { CenterPart } from \"./page/CenterPart\";\nimport { RightPart } from \"./page/RightPart\";\nimport { LeftPart } from \"./page/LeftPart\";\nimport { CenterPartV2 } from \"./page/CenterPartV2\";\nimport { UnitsArray } from \"./Logic/GenerateUnits\";\nimport Unit from \"../src/strategy/classes/unit/Unit\";\nimport { useState, useEffect } from \"react\";\nimport { QueueUI } from \"../src/page/QueueUI\";\nimport { UnitUI } from \"../src/page/UnitUI\";\nimport { generateQueue } from \"../src/Logic/Generatequeue\";\nimport { array } from \"prop-types\";\nimport { inheritTrailingComments } from \"@babel/types\";\n\nconst App: React.FC = () => {\n  const unitsHP: number[] = UnitsArray.map(unit => {\n    return unit._HP;\n  });\n  const falseArray: boolean[] = Array(12).fill(false);\n  const [isHexed, setHexed] = useState(falseArray);\n  const getQueue: Array<Unit> = generateQueue(UnitsArray);\n  const [queue, setQueue] = useState(getQueue);\n\n  interface ITeamObject {\n    ally: Array<Unit>;\n    enemy: Array<Unit>;\n  }\n  const filterHP = (array: Array<Unit>): Array<Unit> => {\n    const a: Array<Unit> = array.filter(unit => unit._HP > 0);\n    return a;\n  };\n\n  const getAllyAndEnemyTeam = (\n    unitId: number,\n    battleField: Array<Unit>\n  ): ITeamObject => {\n    console.log(\"Its buttleField must be const\", battleField);\n    const len = battleField.length;\n    const lenDivTwo = len / 2;\n    const lenDivFour = len / 4;\n    const sumOFLenDivTwoLenDivFour = lenDivTwo + lenDivFour;\n    const copyBattleField = [...battleField];\n    // const teamB0 = battleField.slice(6, 9);\n    // const teamB1 = battleField.slice(9, 12);\n    const teamB0 = battleField.slice(lenDivTwo, sumOFLenDivTwoLenDivFour);\n    const teamB1 = battleField.slice(sumOFLenDivTwoLenDivFour, len);\n    const teamB = teamB1.concat(teamB0);\n    const teamA = battleField.slice(0, lenDivTwo);\n    let simpleArray = {\n      ally: teamA,\n      enemy: teamB\n    };\n    console.log(teamB.some(elem => elem._id == unitId));\n    if (teamB.some(elem => elem._id == unitId)) {\n      simpleArray = {\n        ally: teamB,\n        enemy: teamA\n      };\n    }\n    console.log(simpleArray);\n    return simpleArray;\n  };\n\n  const setHexedFUnction =()=>{\n    console.log(\"its naga\");\n    const copyIsHexed = [...isHexed];\n    console.log(\"до действия\", copyIsHexed);\n    copyIsHexed[index] = true;\n    console.log(\"after действия\", copyIsHexed);\n    setHexed(copyIsHexed);\n  }\n  const generateNewTurn = () => {\n    setPtotect(falseArray);\n    setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    setHexed(falseArray);\n  };\n\n  const skipTurn = () => {\n    const nextQueue = [...queue];\n    nextQueue.shift();\n    setQueue(nextQueue);\n\n    if (nextQueue.length === 0) {\n      generateNewTurn();\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"очередь\", queue);\n    console.log(\"type of queue\", typeof queue);\n    console.log(\"unit id\", queue[0]._id);\n    console.log(\" array of hexed\", isHexed);\n    console.log(\" array of hexed\", isHexed[queue[0]._id]);\n    const unit = queue[0];\n    const { ally, enemy } = getAllyAndEnemyTeam(unit._id, UnitsArray);\n    const filteredAlly = filterHP(ally);\n    const filteredEnemy = filterHP(enemy);\n    if (filteredAlly.length === 0 || filteredEnemy.length === 0) {\n      alert(\"Game over.Attacking team win! Start new Game\");\n      window.location.reload();\n    }\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    console.log(filteredAlly, filteredEnemy);\n    if (unit._HP == 0 || isHexed[unit._id]) {\n      skipTurn();\n    }\n    const targetsForAction: Array<Unit> = unit.doSelect(UnitsArray);\n    const a: number[] = [];\n    const idTargets: number[] = targetsForAction.map(unit => {\n      a.push(unit._id);\n      return unit._id;\n    });\n    setTarget(idTargets);\n  }, [queue, isHexed]);\n  const [isProtected, setPtotect] = useState(falseArray);\n  const [target, setTarget] = useState();\n  const [HP, setHP] = useState(unitsHP);\n\n  const handleDefenseClick = (index: number): number => {\n    const protectedState: Array<boolean> = [...isProtected];\n    protectedState[index] = true;\n    setPtotect(protectedState);\n    skipTurn();\n    console.log(\"after skip\");\n\n    return 1;\n  };\n  const handleClick = (index: number): number => {\n    const selectedUnit: Unit = queue[0];\n    const newHP: number[] = selectedUnit.doAction(\n      selectedUnit._id,\n      index,\n      target,\n      UnitsArray,\n      HP,\n      isProtected\n    );\n    console.log(\"выбранный юнит\", selectedUnit._id);\n    console.log(\"выбранная цель\", index);\n    if (selectedUnit._unitType === \"paralyazer\") {\n      console.log(\"its naga\");\n      const copyIsHexed = [...isHexed];\n      console.log(\"до действия\", copyIsHexed);\n      copyIsHexed[index] = true;\n      console.log(\"after действия\", copyIsHexed);\n      setHexed(copyIsHexed);\n    }\n    console.log(isHexed);\n    console.log(newHP);\n    setHP(newHP);\n    skipTurn();\n    return 1;\n  };\n\n  type props = {\n    index: number;\n  };\n\n  const renderLeftPart = () => {\n    const unitsArrayUI: any = queue.map((unit, index) => {\n      return (\n        <QueueUI\n          HP={HP[unit._id]}\n          key={index}\n          currentUnit={unit}\n          currentIndex={index}\n        />\n      );\n    });\n\n    return unitsArrayUI;\n  };\n  const isAtcaked: any = (index: number, unit: Unit) => {\n    if (target === undefined) {\n    } else {\n      if (target.indexOf(index) === -1 || HP[index] <= 0) {\n        return false;\n      } else return true;\n    }\n  };\n\n  const renderCenterPart = () => {\n    const unitsArrayUI: any = UnitsArray.map((unit, index) => {\n      if (index === 5) {\n        return (\n          <React.Fragment key={index}>\n            <UnitUI\n              HP={HP[index]}\n              currentUnit={unit}\n              currentIndex={index}\n              underAtack={isAtcaked(index, unit)}\n              isActive={queue[0]._id === index ? true : false}\n              hexed={isHexed[index]}\n              protected={isProtected[index]}\n              onClick={() => {\n                handleClick(index);\n              }}\n              onDefenseClick={() => {\n                handleDefenseClick(index);\n              }}\n            />\n            <div className=\"border\" key={100}></div>\n          </React.Fragment>\n        );\n      }\n      return (\n        <UnitUI\n          HP={HP[index]}\n          key={index}\n          currentUnit={unit}\n          currentIndex={index}\n          isActive={queue[0]._id === index ? true : false}\n          hexed={isHexed[index]}\n          protected={isProtected[index]}\n          underAtack={isAtcaked(index, unit)}\n          onClick={() => {\n            handleClick(index);\n          }}\n          onDefenseClick={() => {\n            handleDefenseClick(index);\n          }}\n        />\n      );\n    });\n\n    return <div className=\"battleField\">{unitsArrayUI}</div>;\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"left-part\">{renderLeftPart()}</div>\n\n      <React.Fragment>{renderCenterPart()}</React.Fragment>\n      <RightPart />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
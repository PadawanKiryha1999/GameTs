{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage);\n        if (_damage >= HP[index]) copyHP[index] = 0;else {\n          console.log(\"HP before\", HP[index]);\n          copyHP[index] = HP[index] - _damage;\n          console.log(\"Hp after\", copyHP[index]);\n        }\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    if (unit._id > 5) {\n      let enemies = battleField.slice(0, 6);\n      const allies = battleField.slice(6, 12);\n      let alliesFirstLane = allies.slice(0, 3);\n      const alliesSecondLane = allies.slice(3, 6);\n      const enemiesSecondLane = enemies.slice(0, 3);\n      const enemiesFirstLane = enemies.slice(3, 6); // const setTarget=(alliesFirstLane:Array<Unit>,unit:Unit,enemiesFirstLane:Array<Unit>):Array<Unit>=>{\n      //   return enemies\n      // }\n\n      const isInFirstLane = false;\n\n      for (let index = 0; index < 3; index++) {\n        console.log(\"index first lane\", index);\n\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            const copy = [...enemiesFirstLane];\n            const targets = copy.filter(unit => unit._HP > 0);\n            enemies = targets;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copyEnemiesFirstLane = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n\n            if (aliveUnitCopyEnemiesFirstLane.length === 1 && aliveUnitCopyEnemiesFirstLane[0]._id === 5) {\n              console.log(\"AAAAAAAAAAAAAA\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n\n            copyEnemiesFirstLane.pop();\n            const targets = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            enemies = targets;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            const copyEnemiesFirstLane = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n\n            if (aliveUnitCopyEnemiesFirstLane.length === 1 && aliveUnitCopyEnemiesFirstLane[0]._id === 3) {\n              console.log(\"bbbbbb\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n\n            copyEnemiesFirstLane.shift();\n            const targets = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            enemies = targets;\n            break;\n          }\n        }\n      }\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unit._id) {\n          enemies = [];\n        }\n      }\n\n      let deathUnit = 0;\n      alliesFirstLane.forEach(unit => {\n        if (unit._HP === 0) ++deathUnit;\n      });\n      console.log(\"умершие юниты\", deathUnit);\n\n      if (deathUnit === 3) {\n        console.log(\"all unit in first laine is died\");\n        console.log(alliesFirstLane);\n        console.log(alliesSecondLane);\n      }\n\n      return enemies;\n    } else {\n      let enemies = battleField.slice(6, 12);\n      const allies = battleField.slice(0, 6);\n      const alliesSecondLane = allies.slice(0, 3);\n      let alliesFirstLane = allies.slice(3, 6);\n      const enemiesFirstLane = enemies.slice(0, 3);\n      const enemiesSecondLane = enemies.slice(3, 6);\n\n      for (let index = 0; index < 3; ++index) {\n        console.log(\"index first lane\", index);\n\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copyEnemiesFirstLane = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n\n            if (aliveUnitCopyEnemiesFirstLane.length === 1 && aliveUnitCopyEnemiesFirstLane[0]._id === 8) {\n              console.log(\"AAAAAAAAAAAAAA\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n\n            copyEnemiesFirstLane.pop();\n            const targets = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            enemies = targets;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            console.log(\"in first lane right \");\n            const copyEnemiesFirstLane = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n\n            if (aliveUnitCopyEnemiesFirstLane.length === 1 && aliveUnitCopyEnemiesFirstLane[0]._id === 6) {\n              console.log(\"bbbbbb\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n\n            copyEnemiesFirstLane.shift();\n            const targets = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            enemies = targets;\n            break;\n          }\n        }\n      }\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unit._id) {\n          enemies = [];\n        }\n      }\n\n      let deathUnit = 0;\n      alliesFirstLane.forEach(unit => {\n        if (unit._HP === 0) ++deathUnit;\n      });\n      console.log(\"умершие юниты\", deathUnit);\n\n      if (deathUnit === 3) {\n        console.log(\"all unit in first laine is died\");\n        console.log(alliesFirstLane);\n        console.log(alliesSecondLane);\n      }\n\n      return enemies;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","copyHP","_damage","console","log","forEach","unit","index","indexOf","_id","doHPreduce","doTargetSelection","enemies","slice","allies","alliesFirstLane","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","isInFirstLane","copy","filter","_HP","copyEnemiesFirstLane","aliveUnitCopyEnemiesFirstLane","length","pop","shift","deathUnit"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage);\n        if (_damage >= HP[index]) copyHP[index] = 0;\n        else {\n          console.log(\"HP before\", HP[index]);\n          copyHP[index] = HP[index] - _damage;\n          console.log(\"Hp after\", copyHP[index]);\n        }\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    if (unit._id > 5) {\n      let enemies: Array<Unit> = battleField.slice(0, 6);\n      const allies: Array<Unit> = battleField.slice(6, 12);\n\n      let alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      // const setTarget=(alliesFirstLane:Array<Unit>,unit:Unit,enemiesFirstLane:Array<Unit>):Array<Unit>=>{\n      //   return enemies\n      // }\n      const isInFirstLane = false;\n      for (let index = 0; index < 3; index++) {\n        console.log(\"index first lane\", index);\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            const targets: Array<Unit> = copy.filter(unit => unit._HP > 0);\n            enemies = targets;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane: Array<\n              Unit\n            > = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            if (\n              aliveUnitCopyEnemiesFirstLane.length === 1 &&\n              aliveUnitCopyEnemiesFirstLane[0]._id === 5\n            ) {\n              console.log(\"AAAAAAAAAAAAAA\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n            copyEnemiesFirstLane.pop();\n            const targets: Array<Unit> = copyEnemiesFirstLane.filter(\n              unit => unit._HP > 0\n            );\n            enemies = targets;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane: Array<\n              Unit\n            > = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            if (\n              aliveUnitCopyEnemiesFirstLane.length === 1 &&\n              aliveUnitCopyEnemiesFirstLane[0]._id === 3\n            ) {\n              console.log(\"bbbbbb\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n\n            copyEnemiesFirstLane.shift();\n            const targets: Array<Unit> = copyEnemiesFirstLane.filter(\n              unit => unit._HP > 0\n            );\n            enemies = targets;\n            break;\n          }\n        }\n      }\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unit._id) {\n          enemies = [];\n        }\n      }\n      let deathUnit: number = 0;\n      alliesFirstLane.forEach(unit => {\n        if (unit._HP === 0) ++deathUnit;\n      });\n      console.log(\"умершие юниты\", deathUnit);\n      if (deathUnit === 3) {\n        console.log(\"all unit in first laine is died\");\n        console.log(alliesFirstLane);\n        console.log(alliesSecondLane);\n      }\n      return enemies;\n    } else {\n      let enemies: Array<Unit> = battleField.slice(6, 12);\n      const allies: Array<Unit> = battleField.slice(0, 6);\n\n      const alliesSecondLane: Array<Unit> = allies.slice(0, 3);\n      let alliesFirstLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(3, 6);\n\n      for (let index = 0; index < 3; ++index) {\n        console.log(\"index first lane\", index);\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane: Array<\n              Unit\n            > = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            if (\n              aliveUnitCopyEnemiesFirstLane.length === 1 &&\n              aliveUnitCopyEnemiesFirstLane[0]._id === 8\n            ) {\n              console.log(\"AAAAAAAAAAAAAA\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n\n            copyEnemiesFirstLane.pop();\n            const targets: Array<Unit> = copyEnemiesFirstLane.filter(\n              unit => unit._HP > 0\n            );\n            enemies = targets;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n\n            console.log(\"in first lane right \");\n            const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n            const aliveUnitCopyEnemiesFirstLane: Array<\n              Unit\n            > = copyEnemiesFirstLane.filter(unit => unit._HP > 0);\n            if (\n              aliveUnitCopyEnemiesFirstLane.length === 1 &&\n              aliveUnitCopyEnemiesFirstLane[0]._id === 6\n            ) {\n              console.log(\"bbbbbb\");\n              enemies = aliveUnitCopyEnemiesFirstLane;\n              break;\n            }\n\n            copyEnemiesFirstLane.shift();\n            const targets: Array<Unit> = copyEnemiesFirstLane.filter(\n              unit => unit._HP > 0\n            );\n            enemies = targets;\n            break;\n          }\n        }\n      }\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unit._id) {\n          enemies = [];\n        }\n      }\n\n      let deathUnit: number = 0;\n      alliesFirstLane.forEach(unit => {\n        if (unit._HP === 0) ++deathUnit;\n      });\n      console.log(\"умершие юниты\", deathUnit);\n      if (deathUnit === 3) {\n        console.log(\"all unit in first laine is died\");\n        console.log(alliesFirstLane);\n        console.log(alliesSecondLane);\n      }\n      return enemies;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
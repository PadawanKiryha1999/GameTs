{"ast":null,"code":"import _slicedToArray from \"/home/kirill/WorkFolder/GameTS/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kirill/WorkFolder/GameTS/my-app/src/App.tsx\";\nimport React from \"react\";\nimport \"./App.css\"; // import { CenterPart } from \"./page/CenterPart\";\n\nimport { RightPart } from \"./page/RightPart\";\nimport { UnitsArray } from \"./Logic/GenerateUnits\";\nimport { useState, useEffect } from \"react\";\nimport { QueueUI } from \"../src/page/QueueUI\";\nimport { UnitUI } from \"../src/page/UnitUI\";\nimport { generateQueue } from \"../src/Logic/Generatequeue\";\n\nconst useStateWithCallback = (initialState, callback) => {\n  const _useState = useState(initialState),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => callback(state), [state, callback]);\n  return [state, setState];\n};\n\nconst App = () => {\n  const unitsHP = UnitsArray.map(unit => {\n    return unit._HP;\n  });\n  const falseArray = Array(12).fill(false);\n\n  const _useStateWithCallback = useStateWithCallback(falseArray, newarray => {\n    console.table(newarray);\n    console.table(isHexed);\n    const a = newarray.every((el, index) => el === isHexed[index]);\n\n    if (!a) {\n      alert(\"asdasfdsgsag\");\n    } //\n    // debugger;\n\n  }),\n        _useStateWithCallback2 = _slicedToArray(_useStateWithCallback, 2),\n        isHexed = _useStateWithCallback2[0],\n        setHexed = _useStateWithCallback2[1];\n\n  const getQueue = generateQueue(UnitsArray);\n\n  const _useState3 = useState(getQueue),\n        _useState4 = _slicedToArray(_useState3, 2),\n        queue = _useState4[0],\n        setQueue = _useState4[1];\n\n  const filterHP = array => {\n    const a = array.filter(unit => unit._HP > 0);\n    return a;\n  };\n\n  const getAllyAndEnemyTeam = (unitId, battleField) => {\n    console.log(\"Its buttleField must be const\", battleField);\n    const len = battleField.length;\n    const lenDivTwo = len / 2;\n    const lenDivFour = len / 4;\n    const sumOFLenDivTwoLenDivFour = lenDivTwo + lenDivFour;\n    const copyBattleField = [...battleField]; // const teamB0 = battleField.slice(6, 9);\n    // const teamB1 = battleField.slice(9, 12);\n\n    const teamB0 = battleField.slice(lenDivTwo, sumOFLenDivTwoLenDivFour);\n    const teamB1 = battleField.slice(sumOFLenDivTwoLenDivFour, len);\n    const teamB = teamB1.concat(teamB0);\n    const teamA = battleField.slice(0, lenDivTwo);\n    let simpleArray = {\n      ally: teamA,\n      enemy: teamB\n    };\n    console.log(teamB.some(elem => elem._id == unitId));\n\n    if (teamB.some(elem => elem._id == unitId)) {\n      simpleArray = {\n        ally: teamB,\n        enemy: teamA\n      };\n    }\n\n    console.log(simpleArray);\n    return simpleArray;\n  };\n\n  const generateNewRound = () => {\n    setPtotect(falseArray);\n    setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    setHexed(falseArray);\n  };\n\n  const skipTurn = () => {\n    const nextQueue = [...queue];\n    nextQueue.shift();\n    setQueue(nextQueue);\n\n    if (nextQueue.length === 0) {\n      generateNewRound();\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"очередь\", queue);\n    console.log(\"type of queue\", typeof queue);\n    console.log(\"unit id\", queue[0]._id);\n    console.log(\" array of hexed\", isHexed);\n    console.log(\" array of hexed\", isHexed[queue[0]._id]);\n    const unit = queue[0];\n\n    const _getAllyAndEnemyTeam = getAllyAndEnemyTeam(unit._id, UnitsArray),\n          ally = _getAllyAndEnemyTeam.ally,\n          enemy = _getAllyAndEnemyTeam.enemy;\n\n    const filteredAlly = filterHP(ally);\n    const filteredEnemy = filterHP(enemy);\n\n    if (filteredAlly.length === 0 || filteredEnemy.length === 0) {\n      alert(\"Game over.Attacking team win! Start new Game\");\n      window.location.reload();\n    }\n\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    console.log(filteredAlly, filteredEnemy);\n\n    if (unit._HP == 0 || isHexed[unit._id]) {\n      skipTurn();\n    }\n\n    if (queue.length === 0) {\n      ge;\n    }\n\n    const targetsForAction = unit.doSelect(UnitsArray);\n    const a = [];\n    const idTargets = targetsForAction.map(unit => {\n      a.push(unit._id);\n      return unit._id;\n    });\n    setTarget(idTargets);\n  }, [queue, isHexed]);\n\n  const _useState5 = useState(falseArray),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isProtected = _useState6[0],\n        setPtotect = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        target = _useState8[0],\n        setTarget = _useState8[1];\n\n  const _useState9 = useState(unitsHP),\n        _useState10 = _slicedToArray(_useState9, 2),\n        HP = _useState10[0],\n        setHP = _useState10[1];\n\n  const handleDefenseClick = index => {\n    const protectedState = [...isProtected];\n    protectedState[index] = true;\n    setPtotect(protectedState);\n    skipTurn();\n    console.log(\"after skip\");\n    return 1;\n  };\n\n  const handleClick = index => {\n    const selectedUnit = queue[0];\n    const newHP = selectedUnit.doAction(selectedUnit._id, index, target, UnitsArray, HP, isProtected);\n    console.log(\"выбранный юнит\", selectedUnit._id);\n    console.log(\"выбранная цель\", index);\n\n    if (selectedUnit._unitType === \"paralyazer\") {\n      console.log(\"its naga\");\n      const copyIsHexed = [...isHexed];\n      console.log(\"до действия\", copyIsHexed);\n      copyIsHexed[index] = true;\n      console.log(\"after действия\", copyIsHexed);\n      setHexed([...copyIsHexed]);\n    }\n\n    skipTurn();\n    setHP(newHP);\n    return 1;\n  };\n\n  const renderLeftPart = () => {\n    const unitsArrayUI = queue.map((unit, index) => {\n      return React.createElement(QueueUI, {\n        HP: HP[unit._id],\n        key: index,\n        currentUnit: unit,\n        currentIndex: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      });\n    });\n    return unitsArrayUI;\n  };\n\n  const isAtcaked = (index, unit) => {\n    if (target === undefined) {} else {\n      if (target.indexOf(index) === -1 || HP[index] <= 0) {\n        return false;\n      } else return true;\n    }\n  };\n\n  const renderCenterPart = () => {\n    const unitsArrayUI = UnitsArray.map((unit, index) => {\n      if (index === 5) {\n        return React.createElement(React.Fragment, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, React.createElement(UnitUI, {\n          HP: HP[index],\n          currentUnit: unit,\n          currentIndex: index,\n          underAtack: isAtcaked(index, unit),\n          isActive: queue[0]._id === index ? true : false,\n          hexed: isHexed[index],\n          protected: isProtected[index],\n          onClick: () => {\n            handleClick(index);\n          },\n          onDefenseClick: () => {\n            handleDefenseClick(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"border\",\n          key: 100,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(UnitUI, {\n        HP: HP[index],\n        key: index,\n        currentUnit: unit,\n        currentIndex: index,\n        isActive: queue[0]._id === index ? true : false,\n        hexed: isHexed[index],\n        protected: isProtected[index],\n        underAtack: isAtcaked(index, unit),\n        onClick: () => {\n          handleClick(index);\n        },\n        onDefenseClick: () => {\n          handleDefenseClick(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"battleField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, unitsArrayUI);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"left-part\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, renderLeftPart()), React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, renderCenterPart()), React.createElement(RightPart, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/App.tsx"],"names":["React","RightPart","UnitsArray","useState","useEffect","QueueUI","UnitUI","generateQueue","useStateWithCallback","initialState","callback","state","setState","App","unitsHP","map","unit","_HP","falseArray","Array","fill","newarray","console","table","isHexed","a","every","el","index","alert","setHexed","getQueue","queue","setQueue","filterHP","array","filter","getAllyAndEnemyTeam","unitId","battleField","log","len","length","lenDivTwo","lenDivFour","sumOFLenDivTwoLenDivFour","copyBattleField","teamB0","slice","teamB1","teamB","concat","teamA","simpleArray","ally","enemy","some","elem","_id","generateNewRound","setPtotect","skipTurn","nextQueue","shift","filteredAlly","filteredEnemy","window","location","reload","ge","targetsForAction","doSelect","idTargets","push","setTarget","isProtected","target","HP","setHP","handleDefenseClick","protectedState","handleClick","selectedUnit","newHP","doAction","_unitType","copyIsHexed","renderLeftPart","unitsArrayUI","isAtcaked","undefined","indexOf","renderCenterPart"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n// import { CenterPart } from \"./page/CenterPart\";\nimport { RightPart } from \"./page/RightPart\";\nimport { LeftPart } from \"./page/LeftPart\";\nimport { CenterPartV2 } from \"./page/CenterPartV2\";\nimport { UnitsArray } from \"./Logic/GenerateUnits\";\nimport Unit from \"../src/strategy/classes/unit/Unit\";\nimport { useState, useEffect } from \"react\";\nimport { QueueUI } from \"../src/page/QueueUI\";\nimport { UnitUI } from \"../src/page/UnitUI\";\nimport { generateQueue } from \"../src/Logic/Generatequeue\";\nimport { array } from \"prop-types\";\nimport { inheritTrailingComments } from \"@babel/types\";\n\nconst useStateWithCallback = (initialState: any, callback: any) => {\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => callback(state), [state, callback]);\n\n  return [state, setState];\n};\n\nconst App: React.FC = () => {\n  const unitsHP: number[] = UnitsArray.map(unit => {\n    return unit._HP;\n  });\n  const falseArray: boolean[] = Array(12).fill(false);\n  const [isHexed, setHexed] = useStateWithCallback(\n    falseArray,\n    (newarray: boolean[]) => {\n      console.table(newarray);\n      console.table(isHexed);\n      const a = newarray.every((el, index) => el === isHexed[index]);\n      if (!a) {\n        alert(\"asdasfdsgsag\");\n      }\n      //\n      // debugger;\n    }\n  );\n\n  const getQueue: Array<Unit> = generateQueue(UnitsArray);\n  const [queue, setQueue] = useState(getQueue);\n\n  interface ITeamObject {\n    ally: Array<Unit>;\n    enemy: Array<Unit>;\n  }\n  const filterHP = (array: Array<Unit>): Array<Unit> => {\n    const a: Array<Unit> = array.filter(unit => unit._HP > 0);\n    return a;\n  };\n\n  const getAllyAndEnemyTeam = (\n    unitId: number,\n    battleField: Array<Unit>\n  ): ITeamObject => {\n    console.log(\"Its buttleField must be const\", battleField);\n    const len = battleField.length;\n    const lenDivTwo = len / 2;\n    const lenDivFour = len / 4;\n    const sumOFLenDivTwoLenDivFour = lenDivTwo + lenDivFour;\n    const copyBattleField = [...battleField];\n    // const teamB0 = battleField.slice(6, 9);\n    // const teamB1 = battleField.slice(9, 12);\n    const teamB0 = battleField.slice(lenDivTwo, sumOFLenDivTwoLenDivFour);\n    const teamB1 = battleField.slice(sumOFLenDivTwoLenDivFour, len);\n    const teamB = teamB1.concat(teamB0);\n    const teamA = battleField.slice(0, lenDivTwo);\n    let simpleArray = {\n      ally: teamA,\n      enemy: teamB\n    };\n    console.log(teamB.some(elem => elem._id == unitId));\n    if (teamB.some(elem => elem._id == unitId)) {\n      simpleArray = {\n        ally: teamB,\n        enemy: teamA\n      };\n    }\n    console.log(simpleArray);\n    return simpleArray;\n  };\n\n  const generateNewRound = () => {\n    setPtotect(falseArray);\n    setQueue(generateQueue(UnitsArray, \"new turn\", isHexed));\n    setHexed(falseArray);\n  };\n\n  const skipTurn = () => {\n    const nextQueue = [...queue];\n    nextQueue.shift();\n    setQueue(nextQueue);\n\n    if (nextQueue.length === 0) {\n      generateNewRound();\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"очередь\", queue);\n    console.log(\"type of queue\", typeof queue);\n    console.log(\"unit id\", queue[0]._id);\n    console.log(\" array of hexed\", isHexed);\n    console.log(\" array of hexed\", isHexed[queue[0]._id]);\n    const unit = queue[0];\n    const { ally, enemy } = getAllyAndEnemyTeam(unit._id, UnitsArray);\n    const filteredAlly = filterHP(ally);\n    const filteredEnemy = filterHP(enemy);\n\n    if (filteredAlly.length === 0 || filteredEnemy.length === 0) {\n      alert(\"Game over.Attacking team win! Start new Game\");\n      window.location.reload();\n    }\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    console.log(filteredAlly, filteredEnemy);\n    if (unit._HP == 0 || isHexed[unit._id]) {\n      skipTurn();\n    }\n    if(queue.length===0){\n      ge\n    }\n    const targetsForAction: Array<Unit> = unit.doSelect(UnitsArray);\n    const a: number[] = [];\n    const idTargets: number[] = targetsForAction.map(unit => {\n      a.push(unit._id);\n      return unit._id;\n    });\n    setTarget(idTargets);\n  }, [queue, isHexed]);\n  const [isProtected, setPtotect] = useState(falseArray);\n  const [target, setTarget] = useState();\n  const [HP, setHP] = useState(unitsHP);\n\n  const handleDefenseClick = (index: number): number => {\n    const protectedState: Array<boolean> = [...isProtected];\n    protectedState[index] = true;\n    setPtotect(protectedState);\n    skipTurn();\n    console.log(\"after skip\");\n\n    return 1;\n  };\n  const handleClick = (index: number): number => {\n    const selectedUnit: Unit = queue[0];\n    const newHP: number[] = selectedUnit.doAction(\n      selectedUnit._id,\n      index,\n      target,\n      UnitsArray,\n      HP,\n      isProtected\n    );\n    console.log(\"выбранный юнит\", selectedUnit._id);\n    console.log(\"выбранная цель\", index);\n    if (selectedUnit._unitType === \"paralyazer\") {\n      console.log(\"its naga\");\n      const copyIsHexed = [...isHexed];\n      console.log(\"до действия\", copyIsHexed);\n      copyIsHexed[index] = true;\n      console.log(\"after действия\", copyIsHexed);\n      setHexed([...copyIsHexed]);\n    }\n    skipTurn();\n    setHP(newHP);\n    return 1;\n  };\n\n  type props = {\n    index: number;\n  };\n\n  const renderLeftPart = () => {\n    const unitsArrayUI: any = queue.map((unit, index) => {\n      return (\n        <QueueUI\n          HP={HP[unit._id]}\n          key={index}\n          currentUnit={unit}\n          currentIndex={index}\n        />\n      );\n    });\n\n    return unitsArrayUI;\n  };\n  const isAtcaked: any = (index: number, unit: Unit) => {\n    if (target === undefined) {\n    } else {\n      if (target.indexOf(index) === -1 || HP[index] <= 0) {\n        return false;\n      } else return true;\n    }\n  };\n\n  const renderCenterPart = () => {\n    const unitsArrayUI: any = UnitsArray.map((unit, index) => {\n      if (index === 5) {\n        return (\n          <React.Fragment key={index}>\n            <UnitUI\n              HP={HP[index]}\n              currentUnit={unit}\n              currentIndex={index}\n              underAtack={isAtcaked(index, unit)}\n              isActive={queue[0]._id === index ? true : false}\n              hexed={isHexed[index]}\n              protected={isProtected[index]}\n              onClick={() => {\n                handleClick(index);\n              }}\n              onDefenseClick={() => {\n                handleDefenseClick(index);\n              }}\n            />\n            <div className=\"border\" key={100}></div>\n          </React.Fragment>\n        );\n      }\n      return (\n        <UnitUI\n          HP={HP[index]}\n          key={index}\n          currentUnit={unit}\n          currentIndex={index}\n          isActive={queue[0]._id === index ? true : false}\n          hexed={isHexed[index]}\n          protected={isProtected[index]}\n          underAtack={isAtcaked(index, unit)}\n          onClick={() => {\n            handleClick(index);\n          }}\n          onDefenseClick={() => {\n            handleDefenseClick(index);\n          }}\n        />\n      );\n    });\n\n    return <div className=\"battleField\">{unitsArrayUI}</div>;\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"left-part\">{renderLeftPart()}</div>\n\n      <React.Fragment>{renderCenterPart()}</React.Fragment>\n      <RightPart />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP) {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    if (unit._id > 5) {\n      let enemies = battleField.slice(0, 6);\n      const allies = battleField.slice(6, 12);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane = allies.slice(0, 3);\n      const alliesSecondLane = allies.slice(3, 6);\n      const enemiesSecondLane = enemies.slice(0, 3);\n      const enemiesFirstLane = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      loop: for (let index = 0; index < 4; ++index) {\n        if (alliesFirstLane[index]._id === unit._id) {\n          conso;\n\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break loop;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break loop;\n          } else {\n            console.log(\"in first lane right \");\n            const copy = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break loop;\n          }\n        } else {\n          console.log(1);\n          break loop;\n        }\n      } // alliesFirstLane.forEach((e, index) => {\n      //   if (e._id === unit._id) {\n      //     if (index === 1) {\n      //       console.log(\"in first lane center \");\n      //       enemies = enemiesFirstLane;\n      //     } else if (index === 0) {\n      //       console.log(\"in first lane left \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.pop();\n      //       enemies = copy;\n      //     } else {\n      //       console.log(\"in first lane right \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.shift();\n      //       enemies = copy;\n      //     }\n      //   } else {\n      //     console.log(1);\n      //   }\n      // });\n\n\n      return enemies;\n    } else {\n      let enemies = battleField.slice(6, 12);\n      const allies = battleField.slice(0, 6);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesSecondLane = allies.slice(0, 3);\n      const alliesFirstLane = allies.slice(3, 6);\n      const enemiesFirstLane = enemies.slice(0, 3);\n      const enemiesSecondLane = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      loop1: for (let index = 0; index < 4; ++index) {\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break loop1;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break loop1;\n          } else {\n            console.log(\"in first lane right \");\n            const copy = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break loop1;\n          }\n        } else {\n          console.log(1);\n          break loop1;\n        }\n      } // alliesFirstLane.forEach((e, index) => {\n      //   if (e._id === unit._id) {\n      //     if (index === 1) {\n      //       console.log(\"in first lane center \");\n      //       enemies = enemiesFirstLane;\n      //     } else if (index === 0) {\n      //       console.log(\"in first lane left \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.pop();\n      //       enemies = copy;\n      //     } else {\n      //       console.log(\"in first lane right \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.shift();\n      //       enemies = copy;\n      //     }\n      //   } else {\n      //     console.log(1);\n      //   }\n      // });\n\n\n      return enemies;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","console","log","doTargetSelection","unit","_id","enemies","slice","allies","alliesFirstLane","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","loop","index","conso","copy","pop","shift","loop1"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[]\n  ): number[] {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    if (unit._id > 5) {\n      let enemies: Array<Unit> = battleField.slice(0, 6);\n      const allies: Array<Unit> = battleField.slice(6, 12);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      loop: for (let index = 0; index < 4; ++index) {\n        if (alliesFirstLane[index]._id === unit._id) {\n          conso\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break loop;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break loop;\n          } else {\n            console.log(\"in first lane right \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break loop;\n          }\n        } else {\n          console.log(1);\n          break loop;\n        }\n      }\n\n      // alliesFirstLane.forEach((e, index) => {\n      //   if (e._id === unit._id) {\n      //     if (index === 1) {\n      //       console.log(\"in first lane center \");\n      //       enemies = enemiesFirstLane;\n      //     } else if (index === 0) {\n      //       console.log(\"in first lane left \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.pop();\n      //       enemies = copy;\n      //     } else {\n      //       console.log(\"in first lane right \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.shift();\n      //       enemies = copy;\n      //     }\n      //   } else {\n      //     console.log(1);\n      //   }\n      // });\n\n      return enemies;\n    } else {\n      let enemies: Array<Unit> = battleField.slice(6, 12);\n      const allies: Array<Unit> = battleField.slice(0, 6);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesSecondLane: Array<Unit> = allies.slice(0, 3);\n      const alliesFirstLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      loop1: for (let index = 0; index < 4; ++index) {\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break loop1;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break loop1;\n          } else {\n            console.log(\"in first lane right \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break loop1;\n          }\n        } else {\n          console.log(1);\n          break loop1;\n        }\n      }\n\n      // alliesFirstLane.forEach((e, index) => {\n      //   if (e._id === unit._id) {\n      //     if (index === 1) {\n      //       console.log(\"in first lane center \");\n      //       enemies = enemiesFirstLane;\n\n      //     } else if (index === 0) {\n      //       console.log(\"in first lane left \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.pop();\n      //       enemies = copy;\n      //     } else {\n      //       console.log(\"in first lane right \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.shift();\n      //       enemies = copy;\n      //     }\n      //   } else {\n      //     console.log(1);\n      //   }\n      // });\n\n      return enemies;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
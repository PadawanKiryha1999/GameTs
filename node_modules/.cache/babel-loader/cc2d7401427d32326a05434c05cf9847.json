{"ast":null,"code":"export default class MeleeStrategy {\n  constructor() {\n    this.getAllyAndEnemyTeam = (unitId, battleField) => {\n      console.log(\"Its buttleField must be const\", battleField);\n      const copyBattleField = [...battleField];\n      const teamA = battleField.slice(0, 6);\n      console.log(teamA);\n      const teamB = battleField.slice(6, 12);\n      console.log(\"team b\", teamB);\n      let returnedObject = {\n        ally: teamA,\n        enemy: teamB\n      };\n      console.log(teamB.some(elem => elem == unitId));\n\n      if (teamB.some(elem => elem == unitId)) {\n        returnedObject = {\n          ally: teamB,\n          enemy: teamA\n        };\n      }\n\n      return returnedObject;\n    };\n  }\n\n  doAlgorithm(atackingUnit, target, targets, battleField, HP, isProtected) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(copyHP[index], _damage, isProtected[index]);\n        console.log(\"After action\", copyHP);\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    return [];\n  }\n  /**\n   * Responsible to handle cases when Melee unit can't attack at all.\n   */\n\n\n  canAttack(meleePos, allyBattlefield) {\n    return false;\n  }\n\n  getEnemyLineToAttack(enemyBattlefield) {\n    return [];\n  }\n\n} // describe(\"my test\", () => {\n//   test(\"get units method\", async () => {\n//     const units = [[new Unit()]];\n//     const units = await getUnits();\n//     expect(units.length).toBe(1);\n//     expect(units.every(i => !i.depricated)).toBe(true);\n//   });\n// });","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","getAllyAndEnemyTeam","unitId","battleField","console","log","copyBattleField","teamA","slice","teamB","returnedObject","ally","enemy","some","elem","doAlgorithm","atackingUnit","target","targets","HP","isProtected","copyHP","_damage","forEach","unit","index","indexOf","_id","doHPreduce","doHPUIReduce","doTargetSelection","canAttack","meleePos","allyBattlefield","getEnemyLineToAttack","enemyBattlefield"],"mappings":"AAIA,eAAe,MAAMA,aAAN,CAAyC;AAAA;AAAA,SA+BtDC,mBA/BsD,GA+BhC,CACpBC,MADoB,EAEpBC,WAFoB,KAGF;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,WAA7C;AACA,YAAMG,eAAe,GAAG,CAAC,GAAGH,WAAJ,CAAxB;AACA,YAAMI,KAAK,GAAGJ,WAAW,CAACK,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,YAAME,KAAK,GAAGN,WAAW,CAACK,KAAZ,CAAkB,CAAlB,EAAqB,EAArB,CAAd;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBI,KAAtB;AACA,UAAIC,cAAc,GAAG;AACnBC,QAAAA,IAAI,EAAEJ,KADa;AAEnBK,QAAAA,KAAK,EAAEH;AAFY,OAArB;AAIAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACI,IAAN,CAAWC,IAAI,IAAIA,IAAI,IAAIZ,MAA3B,CAAZ;;AACA,UAAIO,KAAK,CAACI,IAAN,CAAWC,IAAI,IAAIA,IAAI,IAAIZ,MAA3B,CAAJ,EAAwC;AACtCQ,QAAAA,cAAc,GAAG;AACfC,UAAAA,IAAI,EAAEF,KADS;AAEfG,UAAAA,KAAK,EAAEL;AAFQ,SAAjB;AAID;;AACD,aAAOG,cAAP;AACD,KArDqD;AAAA;;AAC/CK,EAAAA,WAAP,CACEC,YADF,EAEEC,MAFF,EAGEC,OAHF,EAIEf,WAJF,EAKEgB,EALF,EAMEC,WANF,EAOY;AACV,UAAMC,MAAgB,GAAG,CAAC,GAAGF,EAAJ,CAAzB;AADU,UAEFG,OAFE,GAEUnB,WAAW,CAACa,YAAD,CAFrB,CAEFM,OAFE;AAGVlB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BW,YAA5B;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBa,OAAvB;AACAf,IAAAA,WAAW,CAACoB,OAAZ,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnC,UAAIP,OAAO,CAACQ,OAAR,CAAgBF,IAAI,CAACG,GAArB,MAA8B,CAAC,CAAnC,EAAsC,CACrC,CADD,MACO;AACLvB,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAmB,QAAAA,IAAI,CAACI,UAAL,CAAgBN,OAAhB,EAAyBF,WAAW,CAACK,KAAD,CAApC;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgB,MAA7B;AACAA,QAAAA,MAAM,CAACI,KAAD,CAAN,GAAgBD,IAAI,CAACK,YAAL,CACdR,MAAM,CAACI,KAAD,CADQ,EAEdH,OAFc,EAGdF,WAAW,CAACK,KAAD,CAHG,CAAhB;AAKArB,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BgB,MAA5B;AACD;AACF,KAbD;AAeAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,WAAjD;AACA,WAAOkB,MAAP;AACD;;AAwBMS,EAAAA,iBAAP,CAAyBN,IAAzB,EAAqCrB,WAArC,EAA4E;AAQ1E,WAAO,EAAP;AACD;AAGD;;;;;AAGQ4B,EAAAA,SAAR,CACEC,QADF,EAEEC,eAFF,EAGW;AACT,WAAO,KAAP;AACD;;AAEOC,EAAAA,oBAAR,CACEC,gBADF,EAEe;AACb,WAAO,EAAP;AACD;;AAhFqD,C,CAyFxD;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nimport { number } from \"prop-types\";\nimport IUnit from \"../../interface/IUnit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[],\n    isProtected: boolean[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(\n          copyHP[index],\n          _damage,\n          isProtected[index]\n        );\n        console.log(\"After action\", copyHP);\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n  getAllyAndEnemyTeam = (\n    unitId: number,\n    battleField: Array<number>\n  ): IUnitPosition => {\n    console.log(\"Its buttleField must be const\", battleField);\n    const copyBattleField = [...battleField];\n    const teamA = battleField.slice(0, 6);\n    console.log(teamA);\n    const teamB = battleField.slice(6, 12);\n    console.log(\"team b\", teamB);\n    let returnedObject = {\n      ally: teamA,\n      enemy: teamB\n    };\n    console.log(teamB.some(elem => elem == unitId));\n    if (teamB.some(elem => elem == unitId)) {\n      returnedObject = {\n        ally: teamB,\n        enemy: teamA\n      };\n    }\n    return returnedObject;\n  };\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    interface IUnitPosition {\n      ally: Array<number>;\n      enemy: Array<number>;\n    }\n\n    \n\n    return [];\n  }\n\n  \n  /**\n   * Responsible to handle cases when Melee unit can't attack at all.\n   */\n  private canAttack(\n    meleePos: IUnitPosition,\n    allyBattlefield: ITeamBattleField\n  ): boolean {\n    return false;\n  }\n\n  private getEnemyLineToAttack(\n    enemyBattlefield: ITeamBattleField\n  ): Array<Unit> {\n    return [];\n  }\n}\n\ntype ITeamBattleField = Array<Array<Unit>>;\nexport interface IUnitPosition {\n  i: number;\n  j: number;\n}\n\n// describe(\"my test\", () => {\n//   test(\"get units method\", async () => {\n//     const units = [[new Unit()]];\n\n//     const units = await getUnits();\n\n//     expect(units.length).toBe(1);\n//     expect(units.every(i => !i.depricated)).toBe(true);\n//   });\n// });\n"]},"metadata":{},"sourceType":"module"}
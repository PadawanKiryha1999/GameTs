{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP) {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    const fun = (enemies, allies) => {\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane = allies.slice(0, 3);\n      const alliesSecondLane = allies.slice(3, 6);\n      const enemiesSecondLane = enemies.slice(0, 3);\n      const enemiesFirstLane = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      loop0: for (let index = 0; index < 3; ++index) {\n        console.log(\"index first lane\", index);\n\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            const copy = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break;\n          }\n        }\n      }\n\n      return enemies;\n    };\n\n    if (unit._id > 5) {\n      return fun(battleField.slice(0, 6), battleField.slice(6, 12)); // let enemies: Array<Unit> = battleField.slice(0, 6);\n      // const allies: Array<Unit> = battleField.slice(6, 12);\n      // console.log(\"enemies\", enemies);\n      // console.log(\"allies\", allies);\n      // const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      // const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      // const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      // const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      // console.log(\"enemies first lane\", enemiesFirstLane);\n      // console.log(\"enemies second lane\", enemiesSecondLane);\n      // console.log(\"allies first lane\", alliesFirstLane);\n      // console.log(\"allis second lane\", alliesSecondLane);\n      // loop0: for (let index = 0; index < 3; ++index) {\n      //   console.log(\"index first lane\", index);\n      //   if (alliesFirstLane[index]._id === unit._id) {\n      //     if (index === 1) {\n      //       console.log(\"in first lane center \");\n      //       enemies = enemiesFirstLane;\n      //       break;\n      //     } else if (index === 0) {\n      //       console.log(\"in first lane left \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.pop();\n      //       enemies = copy;\n      //       break;\n      //     } else {\n      //       console.log(\"in first lane right \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.shift();\n      //       enemies = copy;\n      //       break;\n      //     }\n      //   }\n      // }\n      // return enemies;\n    } else {\n      return fun(battleField.slice(0, 6), battleField.slice(6, 6)); //   let enemies: Array<Unit> = battleField.slice(6, 12);\n      //   const allies: Array<Unit> = battleField.slice(0, 6);\n      //   console.log(\"enemies\", enemies);\n      //   console.log(\"allies\", allies);\n      //   const alliesSecondLane: Array<Unit> = allies.slice(0, 3);\n      //   const alliesFirstLane: Array<Unit> = allies.slice(3, 6);\n      //   const enemiesFirstLane: Array<Unit> = enemies.slice(0, 3);\n      //   const enemiesSecondLane: Array<Unit> = enemies.slice(3, 6);\n      //   console.log(\"enemies first lane\", enemiesFirstLane);\n      //   console.log(\"enemies second lane\", enemiesSecondLane);\n      //   console.log(\"allies first lane\", alliesFirstLane);\n      //   console.log(\"allis second lane\", alliesSecondLane);\n      //   loop1: for (let index = 0; index < 3; ++index) {\n      //     console.log(\"index first lane\", index);\n      //     if (alliesFirstLane[index]._id === unit._id) {\n      //       if (index === 1) {\n      //         console.log(\"in first lane center \");\n      //         enemies = enemiesFirstLane;\n      //         break;\n      //       } else if (index === 0) {\n      //         console.log(\"in first lane left \");\n      //         const copy: Array<Unit> = [...enemiesFirstLane];\n      //         copy.pop();\n      //         enemies = copy;\n      //         break;\n      //       } else {\n      //         console.log(\"in first lane right \");\n      //         const copy: Array<Unit> = [...enemiesFirstLane];\n      //         copy.shift();\n      //         enemies = copy;\n      //         break;\n      //       }\n      //     }\n      //   }\n      //   return enemies;\n      // }\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","console","log","doTargetSelection","unit","fun","enemies","allies","alliesFirstLane","slice","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","loop0","index","_id","copy","pop","shift"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[]\n  ): number[] {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    const fun = (enemies: Array<Unit>, allies: Array<Unit>): Array<Unit> => {\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      loop0: for (let index = 0; index < 3; ++index) {\n        console.log(\"index first lane\", index);\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break;\n          }\n        }\n      }\n      return enemies;\n    };\n    if (unit._id > 5) {\n      return fun(battleField.slice(0, 6), battleField.slice(6, 12));\n      // let enemies: Array<Unit> = battleField.slice(0, 6);\n      // const allies: Array<Unit> = battleField.slice(6, 12);\n      // console.log(\"enemies\", enemies);\n      // console.log(\"allies\", allies);\n      // const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      // const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      // const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      // const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      // console.log(\"enemies first lane\", enemiesFirstLane);\n      // console.log(\"enemies second lane\", enemiesSecondLane);\n      // console.log(\"allies first lane\", alliesFirstLane);\n      // console.log(\"allis second lane\", alliesSecondLane);\n\n      // loop0: for (let index = 0; index < 3; ++index) {\n      //   console.log(\"index first lane\", index);\n      //   if (alliesFirstLane[index]._id === unit._id) {\n      //     if (index === 1) {\n      //       console.log(\"in first lane center \");\n      //       enemies = enemiesFirstLane;\n      //       break;\n      //     } else if (index === 0) {\n      //       console.log(\"in first lane left \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.pop();\n      //       enemies = copy;\n      //       break;\n      //     } else {\n      //       console.log(\"in first lane right \");\n      //       const copy: Array<Unit> = [...enemiesFirstLane];\n      //       copy.shift();\n      //       enemies = copy;\n      //       break;\n      //     }\n      //   }\n      // }\n      // return enemies;\n    } else {\n      return fun(battleField.slice(0, 6), battleField.slice(6, 6));\n      //   let enemies: Array<Unit> = battleField.slice(6, 12);\n      //   const allies: Array<Unit> = battleField.slice(0, 6);\n      //   console.log(\"enemies\", enemies);\n      //   console.log(\"allies\", allies);\n      //   const alliesSecondLane: Array<Unit> = allies.slice(0, 3);\n      //   const alliesFirstLane: Array<Unit> = allies.slice(3, 6);\n      //   const enemiesFirstLane: Array<Unit> = enemies.slice(0, 3);\n      //   const enemiesSecondLane: Array<Unit> = enemies.slice(3, 6);\n      //   console.log(\"enemies first lane\", enemiesFirstLane);\n      //   console.log(\"enemies second lane\", enemiesSecondLane);\n      //   console.log(\"allies first lane\", alliesFirstLane);\n      //   console.log(\"allis second lane\", alliesSecondLane);\n\n      //   loop1: for (let index = 0; index < 3; ++index) {\n      //     console.log(\"index first lane\", index);\n      //     if (alliesFirstLane[index]._id === unit._id) {\n      //       if (index === 1) {\n      //         console.log(\"in first lane center \");\n      //         enemies = enemiesFirstLane;\n      //         break;\n      //       } else if (index === 0) {\n      //         console.log(\"in first lane left \");\n      //         const copy: Array<Unit> = [...enemiesFirstLane];\n      //         copy.pop();\n      //         enemies = copy;\n      //         break;\n      //       } else {\n      //         console.log(\"in first lane right \");\n      //         const copy: Array<Unit> = [...enemiesFirstLane];\n      //         copy.shift();\n      //         enemies = copy;\n      //         break;\n      //       }\n      //     }\n      //   }\n      //   return enemies;\n      // }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
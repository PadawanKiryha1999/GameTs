{"ast":null,"code":"const create2Array = someArray => {\n  const array = [];\n  array.push(someArray.slice(0, 3), someArray.slice(3, 6));\n  return array;\n};\n\nconst getAllyAndEnemyTeam = (unitId, battleField) => {\n  console.log(\"Its buttleField must be const\", battleField);\n  const copyBattleField = [...battleField];\n  const teamA = battleField.slice(0, 6);\n  const teamB = battleField.slice(6, 12);\n  let returnedObject = {\n    ally: teamA,\n    enemy: create2Array(teamB)\n  };\n  console.log(teamB.some(elem => elem._id == unitId));\n\n  if (teamB.some(elem => elem._id == unitId)) {\n    returnedObject = {\n      ally: teamB,\n      enemy: teamA\n    };\n  }\n\n  console.log();\n  console.log(returnedObject);\n  return returnedObject;\n};\n\nexport default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP, isProtected) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(copyHP[index], _damage, isProtected[index]);\n        console.log(\"After action\", copyHP);\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    getAllyAndEnemyTeam(unit._id, battleField);\n    return [];\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["create2Array","someArray","array","push","slice","getAllyAndEnemyTeam","unitId","battleField","console","log","copyBattleField","teamA","teamB","returnedObject","ally","enemy","some","elem","_id","MeleeStrategy","doAlgorithm","atackingUnit","target","targets","HP","isProtected","copyHP","_damage","forEach","unit","index","indexOf","doHPreduce","doHPUIReduce","doTargetSelection"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nimport { number } from \"prop-types\";\nimport IUnit from \"../../interface/IUnit\";\ninterface ITeamObject {\n  ally: Array<Array<Unit>>;\n  enemy: Array<Array<Unit>>;\n}\nconst create2Array = (someArray: Array<Unit>): Array<Array<Unit>> => {\n  const array = [];\n  array.push(someArray.slice(0, 3), someArray.slice(3, 6));\n  return array;\n};\nconst getAllyAndEnemyTeam = (\n  unitId: number,\n  battleField: Array<Unit>\n): ITeamObject => {\n  console.log(\"Its buttleField must be const\", battleField);\n  const copyBattleField = [...battleField];\n  const teamA = battleField.slice(0, 6);\n  const teamB = battleField.slice(6, 12);\n  let returnedObject = {\n    ally: (teamA),\n    enemy: create2Array(teamB)\n  };\n  console.log(teamB.some(elem => elem._id == unitId));\n  if (teamB.some(elem => elem._id == unitId)) {\n    returnedObject = {\n      ally: teamB,\n      enemy: teamA\n    };\n  }\n  console.log();\n  console.log(returnedObject);\n  return returnedObject;\n};\n\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[],\n    isProtected: boolean[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(\n          copyHP[index],\n          _damage,\n          isProtected[index]\n        );\n        console.log(\"After action\", copyHP);\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    getAllyAndEnemyTeam(unit._id, battleField);\n    return [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export default class Context {\n  constructor(strategy) {\n    this.strategy = void 0;\n    this._HP = void 0;\n    this.strategy = strategy;\n  }\n\n  doDefenseAction(incomingDamage, curentHP) {\n    const reducedIncomingDamage = Math.ceil(incomingDamage * 0.5);\n    this._HP = curentHP - reducedIncomingDamage;\n  }\n\n  setAgentTarget() {}\n\n  doHPreduce(incomingDamage, curentHP) {\n    if (incomingDamage >= curentHP) {\n      this._HP = 0;\n    } else {\n      this._HP = curentHP - incomingDamage;\n    }\n  }\n\n  doAction() {\n    this.strategy.doAlgorithm();\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/DefaultStrategy.ts"],"names":["Context","constructor","strategy","_HP","doDefenseAction","incomingDamage","curentHP","reducedIncomingDamage","Math","ceil","setAgentTarget","doHPreduce","doAction","doAlgorithm"],"mappings":"AAEA,eAAe,MAAeA,OAAf,CAAiD;AAG9DC,EAAAA,WAAW,CAACC,QAAD,EAAsB;AAAA,SAFzBA,QAEyB;AAAA,SAGxBC,GAHwB;AAC/B,SAAKD,QAAL,GAAgBA,QAAhB;AACD;;AAGDE,EAAAA,eAAe,CAACC,cAAD,EAAyBC,QAAzB,EAA2C;AACxD,UAAMC,qBAA6B,GAAGC,IAAI,CAACC,IAAL,CAAUJ,cAAc,GAAG,GAA3B,CAAtC;AACA,SAAKF,GAAL,GAAWG,QAAQ,GAAGC,qBAAtB;AACD;;AACDG,EAAAA,cAAc,GAAG,CAAE;;AACnBC,EAAAA,UAAU,CAACN,cAAD,EAAyBC,QAAzB,EAA2C;AACnD,QAAID,cAAc,IAAIC,QAAtB,EAAgC;AAC9B,WAAKH,GAAL,GAAW,CAAX;AACD,KAFD,MAEO;AACL,WAAKA,GAAL,GAAWG,QAAQ,GAAGD,cAAtB;AACD;AACF;;AAEMO,EAAAA,QAAP,GAAwB;AACtB,SAAKV,QAAL,CAAcW,WAAd;AACD;;AAvB6D","sourcesContent":["import IStrategy from \"../../interface/IStrategy\";\nimport DefaultActions from \"../../interface/IUnitDefaultAction\";\nexport default abstract class Context implements DefaultActions {\n  private strategy: IStrategy;\n\n  constructor(strategy: IStrategy) {\n    this.strategy = strategy;\n  }\n  abstract _HP: number;\n\n  doDefenseAction(incomingDamage: number, curentHP: number) {\n    const reducedIncomingDamage: number = Math.ceil(incomingDamage * 0.5);\n    this._HP = curentHP - reducedIncomingDamage;\n  }\n  setAgentTarget() {}\n  doHPreduce(incomingDamage: number, curentHP: number) {\n    if (incomingDamage >= curentHP) {\n      this._HP = 0;\n    } else {\n      this._HP = curentHP - incomingDamage;\n    }\n  }\n\n  public doAction(): void {\n    this.strategy.doAlgorithm();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
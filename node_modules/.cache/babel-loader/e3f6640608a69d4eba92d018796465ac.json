{"ast":null,"code":"const create2Array = someArray => {\n  const array = [];\n  array.push(someArray.slice(3, 6), someArray.slice(0, 3));\n  return array;\n};\n\nconst getAllyAndEnemyTeam = (unitId, battleField) => {\n  console.log(\"Its buttleField must be const\", battleField);\n  const copyBattleField = [...battleField];\n  const teamB0 = battleField.slice(6, 9);\n  const teamB1 = battleField.slice(9, 12);\n  const teamB = teamB1.concat(teamB0);\n  const teamA = battleField.slice(0, 6);\n  let simpleArray = {\n    ally: teamA,\n    enemy: teamB\n  };\n  console.log(teamB.some(elem => elem._id == unitId));\n\n  if (teamB.some(elem => elem._id == unitId)) {\n    simpleArray = {\n      ally: teamB,\n      enemy: teamA\n    };\n  }\n\n  console.log(simpleArray);\n  const returnedObject = {\n    ally: create2Array(simpleArray.ally),\n    enemy: create2Array(simpleArray.enemy)\n  };\n  console.log();\n  console.log(returnedObject);\n  return returnedObject;\n};\n\nconst getElemLane = (elem, array) => {\n  let i = -1;\n  array.some((array, index) => {\n    const a = array.some(element => element._id == elem);\n    console.log(\"this is a\", a);\n\n    if (a) {\n      i = index;\n      return index;\n    }\n  });\n  return i;\n};\n\nconst getElemPosition = (key, array) => {\n  let j = -1;\n  array.some((unit, index) => {\n    if (unit._id === key) return j;\n  });\n  return j;\n};\n\nexport default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP, isProtected) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(copyHP[index], _damage, isProtected[index]);\n        console.log(\"After action\", copyHP);\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    const ally = getAllyAndEnemyTeam(unit._id, battleField).ally;\n    const enemy = getAllyAndEnemyTeam(unit._id, battleField).enemy;\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    const unitLane = getElemLane(unit._id, ally);\n    console.log(\"unit lane\", unitLane);\n    return [];\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["create2Array","someArray","array","push","slice","getAllyAndEnemyTeam","unitId","battleField","console","log","copyBattleField","teamB0","teamB1","teamB","concat","teamA","simpleArray","ally","enemy","some","elem","_id","returnedObject","getElemLane","i","index","a","element","getElemPosition","key","j","unit","MeleeStrategy","doAlgorithm","atackingUnit","target","targets","HP","isProtected","copyHP","_damage","forEach","indexOf","doHPreduce","doHPUIReduce","doTargetSelection","unitLane"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nimport { number } from \"prop-types\";\nimport IUnit from \"../../interface/IUnit\";\ninterface ITeamObject {\n  ally: Array<Array<Unit>>;\n  enemy: Array<Array<Unit>>;\n}\nconst create2Array = (someArray: Array<Unit>): Array<Array<Unit>> => {\n  const array = [];\n  array.push(someArray.slice(3, 6), someArray.slice(0, 3));\n  return array;\n};\nconst getAllyAndEnemyTeam = (\n  unitId: number,\n  battleField: Array<Unit>\n): ITeamObject => {\n  console.log(\"Its buttleField must be const\", battleField);\n  const copyBattleField = [...battleField];\n  const teamB0 = battleField.slice(6, 9);\n  const teamB1 = battleField.slice(9, 12);\n  const teamB = teamB1.concat(teamB0);\n  const teamA = battleField.slice(0, 6);\n  let simpleArray = {\n    ally: teamA,\n    enemy: teamB\n  };\n  console.log(teamB.some(elem => elem._id == unitId));\n  if (teamB.some(elem => elem._id == unitId)) {\n    simpleArray = {\n      ally: teamB,\n      enemy: teamA\n    };\n  }\n  console.log(simpleArray);\n  const returnedObject = {\n    ally: create2Array(simpleArray.ally),\n    enemy: create2Array(simpleArray.enemy)\n  };\n  console.log();\n  console.log(returnedObject);\n  return returnedObject;\n};\nconst getElemLane = (elem: number, array: Array<Array<Unit>>): number => {\n  let i = -1;\n  array.some((array, index) => {\n    const a = array.some(element => element._id == elem);\n    console.log(\"this is a\", a);\n    if (a) {\n      i = index;\n      return index;\n    }\n  });\n  return i;\n};\nconst getElemPosition = (key: number, array: Array<Unit>): number => {\n  let j = -1;\n  array.some((unit, index) => {\n    if(unit._id === key)\n    return j\n  });\n  return j;\n};\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[],\n    isProtected: boolean[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(\n          copyHP[index],\n          _damage,\n          isProtected[index]\n        );\n        console.log(\"After action\", copyHP);\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    const ally = getAllyAndEnemyTeam(unit._id, battleField).ally;\n    const enemy = getAllyAndEnemyTeam(unit._id, battleField).enemy;\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    const unitLane = getElemLane(unit._id, ally);\n    console.log(\"unit lane\", unitLane);\n\n    return [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const create2Array = someArray => {\n  const len = someArray.length;\n  const lenDivTwo = len / 2;\n  const lenDivFour = len / 4;\n  const array = [];\n  array.push(someArray.slice(3, 6), someArray.slice(0, 3)); // array.push(someArray.slice(lenDivFour, lenDivTwo), someArray.slice(0, lenDivFour));\n\n  return array;\n};\n\nconst getAllyAndEnemyTeam = (unitId, battleField) => {\n  console.log(\"Its buttleField must be const\", battleField);\n  const len = battleField.length;\n  const lenDivTwo = len / 2;\n  const lenDivFour = len / 4;\n  const sumOFLenDivTwoLenDivFour = lenDivTwo + lenDivFour;\n  const copyBattleField = [...battleField]; // const teamB0 = battleField.slice(6, 9);\n  // const teamB1 = battleField.slice(9, 12);\n\n  const teamB0 = battleField.slice(lenDivTwo, sumOFLenDivTwoLenDivFour);\n  const teamB1 = battleField.slice(sumOFLenDivTwoLenDivFour, len);\n  const teamB = teamB1.concat(teamB0);\n  const teamA = battleField.slice(0, lenDivTwo);\n  let simpleArray = {\n    ally: teamA,\n    enemy: teamB\n  };\n  console.log(teamB.some(elem => elem._id == unitId));\n\n  if (teamB.some(elem => elem._id == unitId)) {\n    simpleArray = {\n      ally: teamB,\n      enemy: teamA\n    };\n  }\n\n  console.log(simpleArray);\n  const returnedObject = {\n    ally: create2Array(simpleArray.ally),\n    enemy: create2Array(simpleArray.enemy)\n  };\n  console.log();\n  console.log(returnedObject);\n  return returnedObject;\n};\n\nconst getElemLane = (elem, array) => {\n  let i = -1;\n  array.some((array, index) => {\n    const a = array.some(element => element._id == elem);\n    console.log(\"this is a\", a);\n\n    if (a) {\n      i = index;\n      return index;\n    }\n  });\n  return i;\n};\n\nconst funCanUnitAtack = (lane, a) => {\n  const allyesBeforeUnit = a.slice(0, lane);\n  console.log(\"array allys before\", allyesBeforeUnit);\n  console.log(\"allys array\", a);\n  const canUnitAtack = allyesBeforeUnit.every(array => array.every(element => element._HP == 0));\n  return canUnitAtack;\n};\n\nconst linesForAtack = enemyArray => {\n  let string = [];\n  enemyArray.some((array, index) => {\n    // console.log(\"current string\", array);\n    // console.log(\"current string index\", index);\n    const a = array.some(unit => unit._HP > 0);\n    console.log(a);\n\n    if (a) {\n      string = array;\n      return string;\n    }\n  });\n  return string;\n};\n\nconst getAtackedTargets = (pos, array) => {\n  let left = pos - 1;\n  let right = pos + 1;\n  let z = 0;\n  const targets = [];\n  targets.push(array[left], array[pos], array[right]);\n  console.log(targets);\n  console.log(targets.some(unit => unit._HP > 0));\n  let haveTarget = targets.some(unit => unit._HP > 0);\n  if (haveTarget) return targets;\n\n  while (!haveTarget) {\n    --left;\n    ++right;\n    targets.unshift(array[left]);\n    console.log(\"after extention left \", targets);\n    targets.push(array[right]);\n    console.log(\"after extention right \", targets);\n    haveTarget = targets.some(unit => unit._HP > 0);\n    z++;\n  }\n\n  console.log(z);\n  return targets.filter(unit => unit);\n};\n\nexport default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP, isProtected) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(copyHP[index], _damage, isProtected[index]);\n        console.log(\"After action\", copyHP);\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    // const ally = getAllyAndEnemyTeam(unit._id, battleField).ally;\n    // const enemy = getAllyAndEnemyTeam(unit._id, battleField).enemy;\n    const _getAllyAndEnemyTeam = getAllyAndEnemyTeam(unit._id, battleField),\n          ally = _getAllyAndEnemyTeam.ally,\n          enemy = _getAllyAndEnemyTeam.enemy;\n\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    const unitLane = getElemLane(unit._id, ally);\n    const unitPosition = ally[unitLane].indexOf(unit);\n    console.log(\"unit lane\", unitLane);\n    console.log(\"unit position\", unitPosition);\n    const canUnitAtack = funCanUnitAtack(unitLane, ally);\n    console.log(\"Can unit Atack?\", canUnitAtack);\n\n    if (canUnitAtack) {\n      const arayTargets = linesForAtack(enemy);\n      console.log(\"line for atack\", arayTargets);\n      const realTarget = getAtackedTargets(unitPosition, arayTargets);\n      console.log(\"array targets\", arayTargets);\n      return arayTargets;\n    }\n\n    return [];\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["create2Array","someArray","len","length","lenDivTwo","lenDivFour","array","push","slice","getAllyAndEnemyTeam","unitId","battleField","console","log","sumOFLenDivTwoLenDivFour","copyBattleField","teamB0","teamB1","teamB","concat","teamA","simpleArray","ally","enemy","some","elem","_id","returnedObject","getElemLane","i","index","a","element","funCanUnitAtack","lane","allyesBeforeUnit","canUnitAtack","every","_HP","linesForAtack","enemyArray","string","unit","getAtackedTargets","pos","left","right","z","targets","haveTarget","unshift","filter","MeleeStrategy","doAlgorithm","atackingUnit","target","HP","isProtected","copyHP","_damage","forEach","indexOf","doHPreduce","doHPUIReduce","doTargetSelection","unitLane","unitPosition","arayTargets","realTarget"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nimport { number } from \"prop-types\";\nimport IUnit from \"../../interface/IUnit\";\ninterface ITeamObject {\n  ally: Array<Array<Unit>>;\n  enemy: Array<Array<Unit>>;\n}\nconst create2Array = (someArray: Array<Unit>): Array<Array<Unit>> => {\n  const len = someArray.length;\n  const lenDivTwo = len / 2;\n  const lenDivFour = len / 4;\n  const array = [];\n  array.push(someArray.slice(3, 6), someArray.slice(0, 3));\n  // array.push(someArray.slice(lenDivFour, lenDivTwo), someArray.slice(0, lenDivFour));\n  return array;\n};\nconst getAllyAndEnemyTeam = (\n  unitId: number,\n  battleField: Array<Unit>\n): ITeamObject => {\n  console.log(\"Its buttleField must be const\", battleField);\n  const len = battleField.length;\n  const lenDivTwo = len / 2;\n  const lenDivFour = len / 4;\n  const sumOFLenDivTwoLenDivFour = lenDivTwo + lenDivFour;\n  const copyBattleField = [...battleField];\n  // const teamB0 = battleField.slice(6, 9);\n  // const teamB1 = battleField.slice(9, 12);\n  const teamB0 = battleField.slice(lenDivTwo, sumOFLenDivTwoLenDivFour);\n  const teamB1 = battleField.slice(sumOFLenDivTwoLenDivFour, len);\n  const teamB = teamB1.concat(teamB0);\n  const teamA = battleField.slice(0, lenDivTwo);\n  let simpleArray = {\n    ally: teamA,\n    enemy: teamB\n  };\n  console.log(teamB.some(elem => elem._id == unitId));\n  if (teamB.some(elem => elem._id == unitId)) {\n    simpleArray = {\n      ally: teamB,\n      enemy: teamA\n    };\n  }\n  console.log(simpleArray);\n  const returnedObject = {\n    ally: create2Array(simpleArray.ally),\n    enemy: create2Array(simpleArray.enemy)\n  };\n  console.log();\n  console.log(returnedObject);\n  return returnedObject;\n};\nconst getElemLane = (elem: number, array: Array<Array<Unit>>): number => {\n  let i = -1;\n  array.some((array, index) => {\n    const a = array.some(element => element._id == elem);\n    console.log(\"this is a\", a);\n    if (a) {\n      i = index;\n      return index;\n    }\n  });\n  return i;\n};\nconst funCanUnitAtack = (lane: number, a: Array<Array<Unit>>): boolean => {\n  const allyesBeforeUnit = a.slice(0, lane);\n  console.log(\"array allys before\", allyesBeforeUnit);\n  console.log(\"allys array\", a);\n  const canUnitAtack = allyesBeforeUnit.every(array =>\n    array.every(element => element._HP == 0)\n  );\n  return canUnitAtack;\n};\nconst linesForAtack = (enemyArray: Array<Array<Unit>>): Array<Unit> => {\n  let string: Array<Unit> = [];\n  enemyArray.some((array, index) => {\n    // console.log(\"current string\", array);\n    // console.log(\"current string index\", index);\n    const a = array.some(unit => unit._HP > 0);\n    console.log(a);\n    if (a) {\n      string = array;\n      return string;\n    }\n  });\n  return string;\n};\nconst getAtackedTargets = (pos: number, array: Array<Unit>): Array<Unit> => {\n  let left = pos - 1;\n  let right = pos + 1;\n  let z = 0;\n  const targets = [];\n  targets.push(array[left], array[pos], array[right]);\n  console.log(targets);\n  console.log(targets.some(unit => unit._HP > 0));\n\n  let haveTarget = targets.some(unit => unit._HP > 0);\n  if (haveTarget) return targets;\n  while (!haveTarget) {\n    --left;\n    ++right;\n    targets.unshift(array[left]);\n    console.log(\"after extention left \", targets);\n    targets.push(array[right]);\n    console.log(\"after extention right \", targets);\n\n    haveTarget = targets.some(unit => unit._HP > 0);\n\n    z++;\n  }\n  console.log(z);\n  return targets.filter(unit => unit);\n};\n\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[],\n    isProtected: boolean[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(\n          copyHP[index],\n          _damage,\n          isProtected[index]\n        );\n        console.log(\"After action\", copyHP);\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    // const ally = getAllyAndEnemyTeam(unit._id, battleField).ally;\n    // const enemy = getAllyAndEnemyTeam(unit._id, battleField).enemy;\n\n    const { ally, enemy } = getAllyAndEnemyTeam(unit._id, battleField);\n    console.log(\"ally\", ally);\n    console.log(\"enemy\", enemy);\n    const unitLane = getElemLane(unit._id, ally);\n    const unitPosition = ally[unitLane].indexOf(unit);\n    console.log(\"unit lane\", unitLane);\n    console.log(\"unit position\", unitPosition);\n    const canUnitAtack = funCanUnitAtack(unitLane, ally);\n    console.log(\"Can unit Atack?\", canUnitAtack);\n    if (canUnitAtack) {\n      const arayTargets = linesForAtack(enemy);\n      console.log(\"line for atack\", arayTargets);\n      const realTarget: Array<Unit> = getAtackedTargets(\n        unitPosition,\n        arayTargets\n      );\n      console.log(\"array targets\", arayTargets);\n      return arayTargets;\n    }\n    return [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
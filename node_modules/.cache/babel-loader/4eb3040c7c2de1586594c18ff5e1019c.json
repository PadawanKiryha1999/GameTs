{"ast":null,"code":"export const generateQueue = (units, newTurn, isHexed) => {\n  let copy = Object.assign([], units);\n\n  if (newTurn) {\n    if (isHexed) {\n      console.log(\"is hexed from generate\");\n      const copyFilteredHP = [...filteredHP];\n      const filteredHPFilterUnHex = copyFilteredHP.filter((unit, index) => isHexed[index] === false);\n      console.log(\"Отфильтровано по хп  и инициативе и хексу\", filteredHPFilterUnHex);\n      return filteredHPFilterUnHex;\n    } else return filteredHP;\n\n    console.log(\"its new round\");\n    const filteredHP = copy.filter(unit => unit._HP > 0);\n    filteredHP.sort((a, b) => {\n      if (a._initiative < b._initiative) {\n        return 1;\n      }\n\n      if (a._initiative > b._initiative) {\n        return -1;\n      }\n\n      return 0;\n    });\n    console.log(\"Отфильтровано по хп  и инициативе\", filteredHP);\n    console.log(\"принеятый массив хексов\", isHexed);\n  }\n\n  copy.sort((a, b) => {\n    if (a._initiative < b._initiative) {\n      return 1;\n    }\n\n    if (a._initiative > b._initiative) {\n      return -1;\n    }\n\n    return 0;\n  });\n  return copy;\n};","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/Logic/Generatequeue.ts"],"names":["generateQueue","units","newTurn","isHexed","copy","Object","assign","console","log","copyFilteredHP","filteredHP","filteredHPFilterUnHex","filter","unit","index","_HP","sort","a","b","_initiative"],"mappings":"AACA,OAAO,MAAMA,aAAkB,GAAG,CAChCC,KADgC,EAEhCC,OAFgC,EAGhCC,OAHgC,KAI7B;AACH,MAAIC,IAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,CAAxB;;AACA,MAAIC,OAAJ,EAAa;AAEX,QAAIC,OAAJ,EAAa;AACXI,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,YAAMC,cAAc,GAAG,CAAC,GAAGC,UAAJ,CAAvB;AACA,YAAMC,qBAAkC,GAAGF,cAAc,CAACG,MAAf,CACzC,CAACC,IAAD,EAAOC,KAAP,KAAiBX,OAAO,CAACW,KAAD,CAAP,KAAmB,KADK,CAA3C;AAGAP,MAAAA,OAAO,CAACC,GAAR,CACE,2CADF,EAEEG,qBAFF;AAIA,aAAOA,qBAAP;AACD,KAXD,MAWO,OAAOD,UAAP;;AAEPH,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAME,UAAuB,GAAGN,IAAI,CAACQ,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACE,GAAL,GAAW,CAA/B,CAAhC;AACAL,IAAAA,UAAU,CAACM,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxB,UAAID,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,eAAO,CAAP;AACD;;AACD,UAAIF,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,eAAO,CAAC,CAAR;AACD;;AACD,aAAO,CAAP;AACD,KARD;AASAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDE,UAAjD;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAsCL,OAAtC;AAED;;AAEDC,EAAAA,IAAI,CAACY,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,QAAID,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,aAAO,CAAP;AACD;;AACD,QAAIF,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,aAAO,CAAC,CAAR;AACD;;AACD,WAAO,CAAP;AACD,GARD;AASA,SAAOf,IAAP;AACD,CA/CM","sourcesContent":["import Unit from \"../strategy/classes/unit/Unit\";\nexport const generateQueue: any = (\n  units: Array<Unit>,\n  newTurn?: string,\n  isHexed?: boolean[]\n) => {\n  let copy: Array<Unit> = Object.assign([], units);\n  if (newTurn) {\n\n    if (isHexed) {\n      console.log(\"is hexed from generate\");\n      const copyFilteredHP = [...filteredHP];\n      const filteredHPFilterUnHex: Array<Unit> = copyFilteredHP.filter(\n        (unit, index) => isHexed[index] === false\n      );\n      console.log(\n        \"Отфильтровано по хп  и инициативе и хексу\",\n        filteredHPFilterUnHex\n      );\n      return filteredHPFilterUnHex;\n    } else return filteredHP;\n    \n    console.log(\"its new round\");\n    const filteredHP: Array<Unit> = copy.filter(unit => unit._HP > 0);\n    filteredHP.sort((a, b) => {\n      if (a._initiative < b._initiative) {\n        return 1;\n      }\n      if (a._initiative > b._initiative) {\n        return -1;\n      }\n      return 0;\n    });\n    console.log(\"Отфильтровано по хп  и инициативе\", filteredHP);\n    console.log(\"принеятый массив хексов\",isHexed);\n    \n  }\n\n  copy.sort((a, b) => {\n    if (a._initiative < b._initiative) {\n      return 1;\n    }\n    if (a._initiative > b._initiative) {\n      return -1;\n    }\n    return 0;\n  });\n  return copy;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP) {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    if (unit._id > 5) {\n      const enemies = battleField.slice(0, 6);\n      const allies = battleField.slice(6, 12);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane = allies.slice(0, 3);\n      const alliesSecondLane = allies.slice(3, 6);\n      const enemiesSecondLane = enemies.slice(0, 3);\n      const enemiesFirstLane = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n      const targets = alliesFirstLane.forEach((e, index) => {\n        if (e._id === unit._id) {\n          console.log(\"in first lane\");\n\n          if (index == 1) {\n            return enemiesFirstLane;\n          }\n        } else {\n          console.log(\"in second Lane\");\n          return enemiesFirstLane;\n        }\n      });\n      return enemies;\n    } else {\n      const enemies = battleField.slice(6, 12);\n      const allies = battleField.slice(0, 6);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesSecondLane = allies.slice(0, 3);\n      const alliesFirstLane = allies.slice(3, 6);\n      const enemiesFirstLane = enemies.slice(0, 3);\n      const enemiesSecondLane = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n      alliesFirstLane.forEach((e, index) => {\n        if (e._id === unit._id) {\n          console.log(\"in first lane\");\n\n          if (index == 1) {\n            return enemiesFirstLane;\n          }\n        } else {\n          console.log(\"in second Lane\");\n          return enemiesFirstLane;\n        }\n      });\n      return enemies;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","console","log","doTargetSelection","unit","_id","enemies","slice","allies","alliesFirstLane","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","forEach","e","index"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[]\n  ): number[] {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    if (unit._id > 5) {\n      const enemies: Array<Unit> = battleField.slice(0, 6);\n      const allies: Array<Unit> = battleField.slice(6, 12);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n      const targets: Array<Unit> = alliesFirstLane.forEach((e, index) => {\n        if (e._id === unit._id) {\n          console.log(\"in first lane\");\n          if (index == 1) {\n            return enemiesFirstLane;\n          }\n        } else {\n          console.log(\"in second Lane\");\n          return enemiesFirstLane;\n        }\n      });\n\n      return enemies;\n    } else {\n      const enemies: Array<Unit> = battleField.slice(6, 12);\n      const allies: Array<Unit> = battleField.slice(0, 6);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesSecondLane: Array<Unit> = allies.slice(0, 3);\n      const alliesFirstLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n      alliesFirstLane.forEach((e, index) => {\n        if (e._id === unit._id) {\n          console.log(\"in first lane\");\n          if (index == 1) {\n            return enemiesFirstLane;\n          }\n        } else {\n          console.log(\"in second Lane\");\n          return enemiesFirstLane;\n        }\n      });\n\n      return enemies;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
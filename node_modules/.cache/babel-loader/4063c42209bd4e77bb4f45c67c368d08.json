{"ast":null,"code":"export const generateQueue = (units, newTurn, isHexed) => {\n  let copy = Object.assign([], units);\n\n  if (newTurn) {\n    console.log(\"its new round\");\n    const filteredHP = copy.filter(unit => unit._HP > 0);\n    filteredHP.sort((a, b) => {\n      if (a._initiative < b._initiative) {\n        return 1;\n      }\n\n      if (a._initiative > b._initiative) {\n        return -1;\n      }\n\n      return 0;\n    });\n    console.log(\"Отфильтровано по хп  и инициативе\", filteredHP);\n    console.log(isHexed);\n\n    if (isHexed) {\n      const copyFilteredHP = [...filteredHP];\n      const filteredHPFilterUnHex = copyFilteredHP.filter((unit, index) => isHexed[index] === false);\n      console.log(\"Отфильтровано по хп  и инициативе и хексу\", filteredHPFilterUnHex);\n      return filteredHPFilterUnHex;\n    } else return filteredHP;\n  }\n\n  copy.sort((a, b) => {\n    if (a._initiative < b._initiative) {\n      return 1;\n    }\n\n    if (a._initiative > b._initiative) {\n      return -1;\n    }\n\n    return 0;\n  });\n  return copy;\n};","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/Logic/Generatequeue.ts"],"names":["generateQueue","units","newTurn","isHexed","copy","Object","assign","console","log","filteredHP","filter","unit","_HP","sort","a","b","_initiative","copyFilteredHP","filteredHPFilterUnHex","index"],"mappings":"AACA,OAAO,MAAMA,aAAkB,GAAG,CAChCC,KADgC,EAEhCC,OAFgC,EAGhCC,OAHgC,KAI7B;AACH,MAAIC,IAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,CAAxB;;AACA,MAAIC,OAAJ,EAAa;AACXK,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMC,UAAuB,GAAGL,IAAI,CAACM,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,GAAL,GAAW,CAA/B,CAAhC;AACAH,IAAAA,UAAU,CAACI,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxB,UAAID,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,eAAO,CAAP;AACD;;AACD,UAAIF,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,eAAO,CAAC,CAAR;AACD;;AACD,aAAO,CAAP;AACD,KARD;AASAT,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDC,UAAjD;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;;AACA,QAAIA,OAAJ,EAAa;AACX,YAAMc,cAAc,GAAG,CAAC,GAAGR,UAAJ,CAAvB;AACA,YAAMS,qBAAkC,GAAGD,cAAc,CAACP,MAAf,CACzC,CAACC,IAAD,EAAOQ,KAAP,KAAiBhB,OAAO,CAACgB,KAAD,CAAP,KAAmB,KADK,CAA3C;AAGAZ,MAAAA,OAAO,CAACC,GAAR,CACE,2CADF,EAEEU,qBAFF;AAIA,aAAOA,qBAAP;AACD,KAVD,MAUO,OAAOT,UAAP;AACR;;AAEDL,EAAAA,IAAI,CAACS,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,QAAID,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,aAAO,CAAP;AACD;;AACD,QAAIF,CAAC,CAACE,WAAF,GAAgBD,CAAC,CAACC,WAAtB,EAAmC;AACjC,aAAO,CAAC,CAAR;AACD;;AACD,WAAO,CAAP;AACD,GARD;AASA,SAAOZ,IAAP;AACD,CA3CM","sourcesContent":["import Unit from \"../strategy/classes/unit/Unit\";\nexport const generateQueue: any = (\n  units: Array<Unit>,\n  newTurn?: string,\n  isHexed?: boolean[]\n) => {\n  let copy: Array<Unit> = Object.assign([], units);\n  if (newTurn) {\n    console.log(\"its new round\");\n    const filteredHP: Array<Unit> = copy.filter(unit => unit._HP > 0);\n    filteredHP.sort((a, b) => {\n      if (a._initiative < b._initiative) {\n        return 1;\n      }\n      if (a._initiative > b._initiative) {\n        return -1;\n      }\n      return 0;\n    });\n    console.log(\"Отфильтровано по хп  и инициативе\", filteredHP);\n    console.log(isHexed);\n    if (isHexed) {\n      const copyFilteredHP = [...filteredHP]\n      const filteredHPFilterUnHex: Array<Unit> = copyFilteredHP.filter(\n        (unit, index) => isHexed[index] === false\n      );\n      console.log(\n        \"Отфильтровано по хп  и инициативе и хексу\",\n        filteredHPFilterUnHex\n      );\n      return filteredHPFilterUnHex;\n    } else return filteredHP;\n  }\n\n  copy.sort((a, b) => {\n    if (a._initiative < b._initiative) {\n      return 1;\n    }\n    if (a._initiative > b._initiative) {\n      return -1;\n    }\n    return 0;\n  });\n  return copy;\n};\n"]},"metadata":{},"sourceType":"module"}
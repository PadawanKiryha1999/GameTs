{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP, isProtected) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(copyHP[index], _damage, isProtected[index]);\n        console.log(\"After action\", copyHP);\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    return [];\n  }\n\n  getTargetToAttack(unit, unitPosition, allyBattlefield, enemyBattlefield) {\n    const getAllyAndEnemyTeam = (unitId, battleField) => {\n      console.log(\"Its buttleField must be const\", battleField);\n      const copyBattleField = [...battleField];\n      const teamA = battleField.slice(0, 6);\n      console.log(teamA);\n      const teamB = battleField.slice(6, 12);\n      console.log(\"team b\", teamB);\n      let returnedObject = {\n        ally: teamA,\n        enemy: teamB\n      };\n      console.log(teamB.some(elem => elem == unitId));\n\n      if (teamB.some(elem => elem == unitId)) {\n        returnedObject = {\n          ally: teamB,\n          enemy: teamA\n        };\n      }\n\n      return returnedObject;\n    };\n\n    const enemyLineToAttack = this.getEnemyLineToAttack(enemyBattlefield);\n    return [];\n  }\n  /**\n   * Responsible to handle cases when Melee unit can't attack at all.\n   */\n\n\n  canAttack(meleePos, allyBattlefield) {\n    return false;\n  }\n\n  getEnemyLineToAttack(enemyBattlefield) {\n    return [];\n  }\n\n} // describe(\"my test\", () => {\n//   test(\"get units method\", async () => {\n//     const units = [[new Unit()]];\n//     const units = await getUnits();\n//     expect(units.length).toBe(1);\n//     expect(units.every(i => !i.depricated)).toBe(true);\n//   });\n// });","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","isProtected","copyHP","_damage","console","log","forEach","unit","index","indexOf","_id","doHPreduce","doHPUIReduce","doTargetSelection","getTargetToAttack","unitPosition","allyBattlefield","enemyBattlefield","getAllyAndEnemyTeam","unitId","copyBattleField","teamA","slice","teamB","returnedObject","ally","enemy","some","elem","enemyLineToAttack","getEnemyLineToAttack","canAttack","meleePos"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nimport { number } from \"prop-types\";\nimport IUnit from \"../../interface/IUnit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[],\n    isProtected: boolean[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage, isProtected[index]);\n        console.log(\"Before action\", copyHP);\n        copyHP[index] = unit.doHPUIReduce(\n          copyHP[index],\n          _damage,\n          isProtected[index]\n        );\n        console.log(\"After action\", copyHP);\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    return [];\n  }\n\n  getTargetToAttack(\n    unit: IUnit,\n    unitPosition: IUnitPosition,\n    allyBattlefield: ITeamBattleField,\n    enemyBattlefield: ITeamBattleField\n  ): IUnit[] {\n    const getAllyAndEnemyTeam = (\n      unitId: number,\n      battleField: Array<number>\n    ): IUnitPosition => {\n\n\n\n      console.log(\"Its buttleField must be const\", battleField);\n      const copyBattleField = [...battleField];\n      const teamA = battleField.slice(0, 6);\n      console.log(teamA);\n      const teamB = battleField.slice(6, 12);\n      console.log(\"team b\", teamB);\n      let returnedObject = {\n        ally: teamA,\n        enemy: teamB\n      };\n      console.log(teamB.some(elem => elem == unitId));\n      if (teamB.some(elem => elem == unitId)) {\n        returnedObject = {\n          ally: teamB,\n          enemy: teamA\n        };\n      }\n      return returnedObject;\n    };\n\n    const enemyLineToAttack = this.getEnemyLineToAttack(enemyBattlefield);\n\n    return [];\n  }\n\n  /**\n   * Responsible to handle cases when Melee unit can't attack at all.\n   */\n  private canAttack(\n    meleePos: IUnitPosition,\n    allyBattlefield: ITeamBattleField\n  ): boolean {\n    return false;\n  }\n\n  private getEnemyLineToAttack(\n    enemyBattlefield: ITeamBattleField\n  ): Array<Unit> {\n    return [];\n  }\n}\n\ntype ITeamBattleField = Array<Array<Unit>>;\nexport interface IUnitPosition {\n  i: number;\n  j: number;\n}\n\n// describe(\"my test\", () => {\n//   test(\"get units method\", async () => {\n//     const units = [[new Unit()]];\n\n//     const units = await getUnits();\n\n//     expect(units.length).toBe(1);\n//     expect(units.every(i => !i.depricated)).toBe(true);\n//   });\n// });\n"]},"metadata":{},"sourceType":"module"}
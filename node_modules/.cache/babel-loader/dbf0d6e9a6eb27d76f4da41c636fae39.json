{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP) {\n    const copyHP = [...HP];\n    const _damage = battleField[atackingUnit]._damage;\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {} else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage);\n        if (_damage >= HP[index]) copyHP[index] = 0;else {\n          console.log(\"HP before\", HP[index]);\n          copyHP[index] = HP[index] - _damage;\n          console.log(\"Hp after\", copyHP[index]);\n        }\n      }\n    });\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    const unitPosition = unit._id;\n\n    const getTargets = (allies, enemies, unitPosition) => {\n      let alliesFirstLane = [];\n      let alliesSecondLane = [];\n      let enemiesSecondLane = [];\n      let enemiesFirstLane = [];\n\n      if (unitPosition <= 5) {\n        alliesFirstLane = allies.slice(3, 6);\n        alliesSecondLane = allies.slice(0, 3);\n        enemiesSecondLane = enemies.slice(3, 6);\n        enemiesFirstLane = enemies.slice(0, 3);\n      } else {\n        alliesFirstLane = allies.slice(0, 3);\n        alliesSecondLane = allies.slice(3, 6);\n        enemiesSecondLane = enemies.slice(0, 3);\n        enemiesFirstLane = enemies.slice(3, 6);\n      }\n\n      console.log(\"2 линия союзников\", alliesSecondLane);\n      console.log(\"1 линя союзников\", alliesFirstLane);\n      console.log(\"2 линия врагов\", enemiesSecondLane);\n      console.log(\"1 линя врагов\", enemiesFirstLane);\n      let isUnitInSecondLine = false;\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unitPosition) {\n          isUnitInSecondLine = true;\n          break;\n        }\n      }\n\n      const getTargetsForUnitFirstLine = (unitPosition, alliesFirstLane, enemiesFirstLane) => {\n        for (let index = 0; index < 3; ++index) {\n          if (alliesFirstLane[index]._id === unitPosition) {\n            if (index === 0) {\n              console.log(\"left\");\n              const copyEnemiesFirstLane = [...enemiesFirstLane];\n              copyEnemiesFirstLane.pop();\n              return copyEnemiesFirstLane;\n            } else if (index === 1) {\n              console.log(\"center\");\n              return enemiesFirstLane;\n            } else if (index === 2) {\n              console.log(\"right\");\n              const copyEnemiesFirstLane = [...enemiesFirstLane];\n              copyEnemiesFirstLane.shift();\n              return copyEnemiesFirstLane;\n            }\n          }\n        }\n\n        return enemies;\n      };\n\n      if (isUnitInSecondLine) {\n        console.log(\"unit in second line\");\n        const allies;\n      } else {\n        console.log(\"unit in first line\");\n        console.log();\n        return getTargetsForUnitFirstLine(unitPosition, alliesFirstLane, enemiesFirstLane);\n      }\n\n      return enemies;\n    };\n\n    if (unitPosition > 5) {\n      const targets = getTargets(battleField.slice(6, 12), battleField.slice(0, 6), unitPosition);\n      return targets;\n    } else {\n      const targets = getTargets(battleField.slice(0, 6), battleField.slice(6, 12), unitPosition);\n      return targets;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","copyHP","_damage","console","log","forEach","unit","index","indexOf","_id","doHPreduce","doTargetSelection","unitPosition","getTargets","allies","enemies","alliesFirstLane","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","slice","isUnitInSecondLine","getTargetsForUnitFirstLine","copyEnemiesFirstLane","pop","shift"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[]\n  ): number[] {\n    const copyHP: number[] = [...HP];\n    const { _damage } = battleField[atackingUnit];\n    console.log(\"atackingUnit\", atackingUnit);\n    console.log(\"targets\", targets);\n    battleField.forEach((unit, index) => {\n      if (targets.indexOf(unit._id) === -1) {\n      } else {\n        console.log(\"do hp reduce\");\n        unit.doHPreduce(_damage);\n        if (_damage >= HP[index]) copyHP[index] = 0;\n        else {\n          console.log(\"HP before\", HP[index]);\n          copyHP[index] = HP[index] - _damage;\n          console.log(\"Hp after\", copyHP[index]);\n        }\n      }\n    });\n\n    console.log(\"its buttleField after deal damage\", battleField);\n    return copyHP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    const unitPosition: number = unit._id;\n    const getTargets = (\n      allies: Array<Unit>,\n      enemies: Array<Unit>,\n      unitPosition: number\n    ): Array<Unit> => {\n      let alliesFirstLane: Array<Unit> = [];\n      let alliesSecondLane: Array<Unit> = [];\n      let enemiesSecondLane: Array<Unit> = [];\n      let enemiesFirstLane: Array<Unit> = [];\n      if (unitPosition <= 5) {\n        alliesFirstLane = allies.slice(3, 6);\n        alliesSecondLane = allies.slice(0, 3);\n        enemiesSecondLane = enemies.slice(3, 6);\n        enemiesFirstLane = enemies.slice(0, 3);\n      } else {\n        alliesFirstLane = allies.slice(0, 3);\n        alliesSecondLane = allies.slice(3, 6);\n        enemiesSecondLane = enemies.slice(0, 3);\n        enemiesFirstLane = enemies.slice(3, 6);\n      }\n\n      console.log(\"2 линия союзников\", alliesSecondLane);\n      console.log(\"1 линя союзников\", alliesFirstLane);\n      console.log(\"2 линия врагов\", enemiesSecondLane);\n      console.log(\"1 линя врагов\", enemiesFirstLane);\n\n      let isUnitInSecondLine: boolean = false;\n\n      for (let index = 0; index < 3; ++index) {\n        if (alliesSecondLane[index]._id === unitPosition) {\n          isUnitInSecondLine = true;\n          break;\n        }\n      }\n      const getTargetsForUnitFirstLine = (\n        unitPosition: number,\n        alliesFirstLane: Array<Unit>,\n        enemiesFirstLane: Array<Unit>\n      ): Array<Unit> => {\n        for (let index = 0; index < 3; ++index) {\n          if (alliesFirstLane[index]._id === unitPosition) {\n            if (index === 0) {\n              console.log(\"left\");\n              const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n              copyEnemiesFirstLane.pop();\n              return copyEnemiesFirstLane;\n            } else if (index === 1) {\n              console.log(\"center\");\n              return enemiesFirstLane;\n            } else if (index === 2) {\n              console.log(\"right\");\n              const copyEnemiesFirstLane: Array<Unit> = [...enemiesFirstLane];\n              copyEnemiesFirstLane.shift();\n              return copyEnemiesFirstLane;\n            }\n          }\n        }\n        return enemies;\n      };\n\n      if (isUnitInSecondLine) {\n        console.log(\"unit in second line\");\n        const allies\n      } else {\n        console.log(\"unit in first line\");\n        console.log();\n        return getTargetsForUnitFirstLine(\n          unitPosition,\n          alliesFirstLane,\n          enemiesFirstLane\n        );\n      }\n\n      return enemies;\n    };\n    if (unitPosition > 5) {\n      const targets: Array<Unit> = getTargets(\n        battleField.slice(6, 12),\n        battleField.slice(0, 6),\n        unitPosition\n      );\n      return targets;\n    } else {\n      const targets: Array<Unit> = getTargets(\n        battleField.slice(0, 6),\n        battleField.slice(6, 12),\n        unitPosition\n      );\n      return targets;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
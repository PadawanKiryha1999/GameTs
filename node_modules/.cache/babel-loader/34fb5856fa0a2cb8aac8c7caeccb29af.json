{"ast":null,"code":"export default class MeleeStrategy {\n  doAlgorithm(atackingUnit, target, targets, battleField, HP) {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n\n  doTargetSelection(unit, battleField) {\n    // const fun = (enemies: Array<Unit>, allies: Array<Unit>): Array<Unit> => {\n    //   console.log(\"enemies\", enemies);\n    //   console.log(\"allies\", allies);\n    //   const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n    //   const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n    //   const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n    //   const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n    //   console.log(\"enemies first lane\", enemiesFirstLane);\n    //   console.log(\"enemies second lane\", enemiesSecondLane);\n    //   console.log(\"allies first lane\", alliesFirstLane);\n    //   console.log(\"allis second lane\", alliesSecondLane);\n    //   loop0: for (let index = 0; index < 3; ++index) {\n    //     console.log(\"index first lane\", index);\n    //     if (alliesFirstLane[index]._id === unit._id) {\n    //       if (index === 1) {\n    //         console.log(\"in first lane center \");\n    //         enemies = enemiesFirstLane;\n    //         break;\n    //       } else if (index === 0) {\n    //         console.log(\"in first lane left \");\n    //         const copy: Array<Unit> = [...enemiesFirstLane];\n    //         copy.pop();\n    //         enemies = copy;\n    //         break;\n    //       } else {\n    //         console.log(\"in first lane right \");\n    //         const copy: Array<Unit> = [...enemiesFirstLane];\n    //         copy.shift();\n    //         enemies = copy;\n    //         break;\n    //       }\n    //     }\n    //   }\n    //   return enemies;\n    // };\n    if (unit._id > 5) {\n      // return fun(battleField.slice(0, 6), battleField.slice(6, 12));\n      let enemies = battleField.slice(0, 6);\n      const allies = battleField.slice(6, 12);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane = allies.slice(0, 3);\n      const alliesSecondLane = allies.slice(3, 6);\n      const enemiesSecondLane = enemies.slice(0, 3);\n      const enemiesFirstLane = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      for (let index = 0; index < 3; ++index) {\n        console.log(\"index first lane\", index);\n\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            const copy = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break;\n          }\n        }\n      }\n\n      return enemies;\n    } else {\n      // return fun(battleField.slice(6, 12), battleField.slice(0, 6));\n      let enemies = battleField.slice(6, 12);\n      const allies = battleField.slice(0, 6);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesSecondLane = allies.slice(0, 3);\n      const alliesFirstLane = allies.slice(3, 6);\n      const enemiesFirstLane = enemies.slice(0, 3);\n      const enemiesSecondLane = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n      for (let index = 0; index < 3; ++index) {\n        console.log(\"index first lane\", index);\n\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            const copy = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break;\n          }\n        }\n      }\n\n      return enemies;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/kirill/WorkFolder/GameTS/my-app/src/strategy/classes/unitStrategy/MeleeStrategy.ts"],"names":["MeleeStrategy","doAlgorithm","atackingUnit","target","targets","battleField","HP","console","log","doTargetSelection","unit","_id","enemies","slice","allies","alliesFirstLane","alliesSecondLane","enemiesSecondLane","enemiesFirstLane","index","copy","pop","shift"],"mappings":"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","sourcesContent":["import IStrategy from \"../../interface/IConcreteStrategy\";\nimport Unit from \"../unit/Unit\";\nexport default class MeleeStrategy implements IStrategy {\n  public doAlgorithm(\n    atackingUnit: number,\n    target: number,\n    targets: number[],\n    battleField: Array<Unit>,\n    HP: number[]\n  ): number[] {\n    console.log(\"Melee strategy\");\n    return HP;\n  }\n  public doTargetSelection(unit: Unit, battleField: Array<Unit>): Array<Unit> {\n    // const fun = (enemies: Array<Unit>, allies: Array<Unit>): Array<Unit> => {\n    //   console.log(\"enemies\", enemies);\n    //   console.log(\"allies\", allies);\n    //   const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n    //   const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n    //   const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n    //   const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n    //   console.log(\"enemies first lane\", enemiesFirstLane);\n    //   console.log(\"enemies second lane\", enemiesSecondLane);\n    //   console.log(\"allies first lane\", alliesFirstLane);\n    //   console.log(\"allis second lane\", alliesSecondLane);\n\n    //   loop0: for (let index = 0; index < 3; ++index) {\n    //     console.log(\"index first lane\", index);\n    //     if (alliesFirstLane[index]._id === unit._id) {\n    //       if (index === 1) {\n    //         console.log(\"in first lane center \");\n    //         enemies = enemiesFirstLane;\n    //         break;\n    //       } else if (index === 0) {\n    //         console.log(\"in first lane left \");\n    //         const copy: Array<Unit> = [...enemiesFirstLane];\n    //         copy.pop();\n    //         enemies = copy;\n    //         break;\n    //       } else {\n    //         console.log(\"in first lane right \");\n    //         const copy: Array<Unit> = [...enemiesFirstLane];\n    //         copy.shift();\n    //         enemies = copy;\n    //         break;\n    //       }\n    //     }\n    //   }\n    //   return enemies;\n    // };\n    if (unit._id > 5) {\n      // return fun(battleField.slice(0, 6), battleField.slice(6, 12));\n      let enemies: Array<Unit> = battleField.slice(0, 6);\n      const allies: Array<Unit> = battleField.slice(6, 12);\n      console.log(\"enemies\", enemies);\n      console.log(\"allies\", allies);\n      const alliesFirstLane: Array<Unit> = allies.slice(0, 3);\n      const alliesSecondLane: Array<Unit> = allies.slice(3, 6);\n      const enemiesSecondLane: Array<Unit> = enemies.slice(0, 3);\n      const enemiesFirstLane: Array<Unit> = enemies.slice(3, 6);\n      console.log(\"enemies first lane\", enemiesFirstLane);\n      console.log(\"enemies second lane\", enemiesSecondLane);\n      console.log(\"allies first lane\", alliesFirstLane);\n      console.log(\"allis second lane\", alliesSecondLane);\n\n     for (let index = 0; index < 3; ++index) {\n        console.log(\"index first lane\", index);\n        if (alliesFirstLane[index]._id === unit._id) {\n          if (index === 1) {\n            console.log(\"in first lane center \");\n            enemies = enemiesFirstLane;\n            break;\n          } else if (index === 0) {\n            console.log(\"in first lane left \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.pop();\n            enemies = copy;\n            break;\n          } else {\n            console.log(\"in first lane right \");\n            const copy: Array<Unit> = [...enemiesFirstLane];\n            copy.shift();\n            enemies = copy;\n            break;\n          }\n        }\n      }\n      return enemies;\n    } else {\n      // return fun(battleField.slice(6, 12), battleField.slice(0, 6));\n        let enemies: Array<Unit> = battleField.slice(6, 12);\n        const allies: Array<Unit> = battleField.slice(0, 6);\n        console.log(\"enemies\", enemies);\n        console.log(\"allies\", allies);\n        const alliesSecondLane: Array<Unit> = allies.slice(0, 3);\n        const alliesFirstLane: Array<Unit> = allies.slice(3, 6);\n        const enemiesFirstLane: Array<Unit> = enemies.slice(0, 3);\n        const enemiesSecondLane: Array<Unit> = enemies.slice(3, 6);\n        console.log(\"enemies first lane\", enemiesFirstLane);\n        console.log(\"enemies second lane\", enemiesSecondLane);\n        console.log(\"allies first lane\", alliesFirstLane);\n        console.log(\"allis second lane\", alliesSecondLane);\n\n        for (let index = 0; index < 3; ++index) {\n          console.log(\"index first lane\", index);\n          if (alliesFirstLane[index]._id === unit._id) {\n            if (index === 1) {\n              console.log(\"in first lane center \");\n              enemies = enemiesFirstLane;\n              break;\n            } else if (index === 0) {\n              console.log(\"in first lane left \");\n              const copy: Array<Unit> = [...enemiesFirstLane];\n              copy.pop();\n              enemies = copy;\n              break;\n            } else {\n              console.log(\"in first lane right \");\n              const copy: Array<Unit> = [...enemiesFirstLane];\n              copy.shift();\n              enemies = copy;\n              break;\n            }\n          }\n        }\n        return enemies;\n      }\n    }\n  }\n\n"]},"metadata":{},"sourceType":"module"}